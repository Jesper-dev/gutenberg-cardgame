[{"D:\\programmering\\src\\gutenberg-cardgame\\src\\index.js":"1","D:\\programmering\\src\\gutenberg-cardgame\\src\\App.js":"2","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\FunctionsComponent.js":"3","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleField.js":"4","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsarray\\CardArray.js":"5","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\BattleField.js":"6","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsarray\\OpponentCardArray.js":"7","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\Spells.js":"8","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\opponent\\OpponentTurn.js":"9","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvas\\Canvas.js":"10","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowRender.js":"11","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleField.js":"12","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\OppCharBattleField.js":"13","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleFieldElements.js":"14","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\BattleFieldElements.js":"15","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandRender.js":"16","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvas\\CanvasElements.js":"17","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\player\\Player.js":"18","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHand.js":"19","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleField.js":"20","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\CardsHand.js":"21","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\player\\PlayerElements.js":"22","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceRender.js":"23","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCard.js":"24","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandElements.js":"25","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleFieldElements.js":"26","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleFieldElements.js":"27","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCard.js":"28","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCard.js":"29","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceElements.js":"30","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCardElements.js":"31","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardElements.js":"32","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardElements.js":"33"},{"size":173,"mtime":1611136770223,"results":"34","hashOfConfig":"35"},{"size":432,"mtime":1611993425518,"results":"36","hashOfConfig":"35"},{"size":17314,"mtime":1611990409357,"results":"37","hashOfConfig":"35"},{"size":1956,"mtime":1611314412085,"results":"38","hashOfConfig":"35"},{"size":14440,"mtime":1611990409361,"results":"39","hashOfConfig":"35"},{"size":1855,"mtime":1611990409358,"results":"40","hashOfConfig":"35"},{"size":15292,"mtime":1611990409362,"results":"41","hashOfConfig":"35"},{"size":3202,"mtime":1611990409358,"results":"42","hashOfConfig":"35"},{"size":593,"mtime":1611990409362,"results":"43","hashOfConfig":"35"},{"size":8273,"mtime":1611994658734,"results":"44","hashOfConfig":"35"},{"size":1121,"mtime":1611484220665,"results":"45","hashOfConfig":"35"},{"size":1135,"mtime":1611314412086,"results":"46","hashOfConfig":"35"},{"size":1080,"mtime":1611314412086,"results":"47","hashOfConfig":"35"},{"size":295,"mtime":1611296975020,"results":"48","hashOfConfig":"35"},{"size":295,"mtime":1611296968576,"results":"49","hashOfConfig":"35"},{"size":457,"mtime":1611292218501,"results":"50","hashOfConfig":"35"},{"size":4543,"mtime":1611994524769,"results":"51","hashOfConfig":"35"},{"size":425,"mtime":1611292218502,"results":"52","hashOfConfig":"35"},{"size":720,"mtime":1611292218501,"results":"53","hashOfConfig":"35"},{"size":984,"mtime":1611292218500,"results":"54","hashOfConfig":"35"},{"size":1763,"mtime":1611294479602,"results":"55","hashOfConfig":"35"},{"size":1938,"mtime":1611990409362,"results":"56","hashOfConfig":"35"},{"size":2354,"mtime":1611990409360,"results":"57","hashOfConfig":"35"},{"size":1126,"mtime":1611484220663,"results":"58","hashOfConfig":"35"},{"size":767,"mtime":1611292218501,"results":"59","hashOfConfig":"35"},{"size":2507,"mtime":1611990409360,"results":"60","hashOfConfig":"35"},{"size":1921,"mtime":1611206720021,"results":"61","hashOfConfig":"35"},{"size":1096,"mtime":1611292218500,"results":"62","hashOfConfig":"35"},{"size":1010,"mtime":1611314412086,"results":"63","hashOfConfig":"35"},{"size":2362,"mtime":1611990409359,"results":"64","hashOfConfig":"35"},{"size":1985,"mtime":1611990409357,"results":"65","hashOfConfig":"35"},{"size":2161,"mtime":1611990409361,"results":"66","hashOfConfig":"35"},{"size":2502,"mtime":1611990409361,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"j6nnoh",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"D:\\programmering\\src\\gutenberg-cardgame\\src\\index.js",[],["142","143"],"D:\\programmering\\src\\gutenberg-cardgame\\src\\App.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\FunctionsComponent.js",["144","145","146","147","148","149","150","151","152","153","154","155"],"import React, { useState, useEffect } from \"react\";\r\nimport BattleField from \"./battlefield/BattleField\";\r\nimport OpponentBattleField from \"./battlefield/OpponentBattleField\";\r\nimport Canvas from \"./canvas/Canvas\";\r\nimport { CardsArray } from \"./cardsarray/CardArray\";\r\nimport { OpponentCardArray } from \"./cardsarray/OpponentCardArray\";\r\nimport {\r\n  DrawOneCard,\r\n  harmonica,\r\n  HealEveryCard,\r\n  tp1,\r\n  jonLevelTwo,\r\n  mariachiOnPlay,\r\n  coffee,\r\n} from \"./Spelleffects/Spells\";\r\nimport {\r\n  startOpponentTurn,\r\n  reduceHpCard,\r\n  reduceDefCard,\r\n} from \"./opponent/OpponentTurn\";\r\nimport { forEach } from \"lodash\";\r\n\r\nlet opponentBattleArr = [];\r\nlet battlefieldArr = [];\r\nlet spellBattlefieldArr = [];\r\nlet attackedArray = [];\r\n\r\nconst FunctionsComponent = () => {\r\n  const [buttonShow, setButtonShow] = useState(true);\r\n\r\n  const [deck, setDeck] = useState([]);\r\n  const [opponentDeck, setOpponentDeck] = useState([]);\r\n  //   const [opponentCards, setOpponentCards] = useState([]);\r\n  const [yourturn, setYourTurn] = useState(true);\r\n\r\n  const [cardsinhand, setCardsInHand] = useState([]);\r\n  const [opponentCardsinhand, setopponentCardsinhand] = useState([]);\r\n\r\n  const [whichTurn, setWhichTurn] = useState(\"Your Turn!\");\r\n\r\n  const [battlefield, setBattlefield] = useState([]);\r\n  const [opponentBattleField, setOppoentBattleField] = useState([]);\r\n  const [spellBattlefield, setSpellBattlefield] = useState([]);\r\n\r\n  const [selectedCard, setSelectedCard] = useState([]);\r\n  const [attackingCard, setAttackingCard] = useState([]);\r\n  const [attacked, setAttacked] = useState([]);\r\n\r\n  const [gold, setGold] = useState(150);\r\n  const [oppGold, setOppGold] = useState(300);\r\n  const [enoughgold, setEnoughGold] = useState(false);\r\n\r\n  const [hp, setHp] = useState(10000);\r\n  const [opponentHp, setOpponentHp] = useState(10000);\r\n\r\n  const [startGameActive, setStartGameActive] = useState(false);\r\n\r\n  const [silencePlayer, setSilencePlayer] = useState(false);\r\n  const [silenceBot, setSilenceBot] = useState(false);\r\n\r\n  const [environment, setEnvironment] = useState(\"\");\r\n\r\n  const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n  };\r\n\r\n  const setAlreadyAtkedCards = () => {\r\n    attackedArray.push(attackingCard[0]);\r\n    setAttacked(attackedArray);\r\n  };\r\n  const newOpponentHp = (newHp) => setOpponentHp(newHp);\r\n  const newPlayerHp = (newHp) => setHp(newHp);\r\n\r\n  const newOpponentBattleField = (arr) => setOppoentBattleField(arr);\r\n\r\n  const makeOpponentDeck = (array) => {\r\n    shuffleArray(array);\r\n    setOpponentDeck(array);\r\n  };\r\n\r\n  useEffect(() => {\r\n    shuffleArray(CardsArray);\r\n    setDeck(CardsArray);\r\n  }, []);\r\n\r\n  const onAttackCardClick = (e) => {\r\n    let clickedBattleCard = e.target.closest(\"div\");\r\n    let card = battlefield.filter((x) => x.id === clickedBattleCard.id);\r\n    setAttackingCard(card);\r\n  };\r\n\r\n  const EndTurn = () => {\r\n    if (yourturn == false) {\r\n      return;\r\n    }\r\n\r\n    console.log(opponentCardsinhand);\r\n    attackedArray = [];\r\n    setAttacked(attackedArray);\r\n\r\n    setYourTurn(false);\r\n    setWhichTurn(\"Opponents Turn\");\r\n\r\n    setSilenceBot(false);\r\n    botDrawCard();\r\n    oppTurn();\r\n\r\n    playCard();\r\n\r\n    setTimeout(() => {\r\n      setYourTurn(true);\r\n      setWhichTurn(\"Your Turn!\");\r\n      startPlayerTurn();\r\n    }, 10000);\r\n  };\r\n\r\n  const oppTurn = () => {\r\n    setTimeout(() => {\r\n      aiAttack();\r\n    }, 6000);\r\n  };\r\n\r\n  const botDrawCard = () => {\r\n    if (opponentCardsinhand.length > 4) {\r\n      opponentDeck.splice(0, 1);\r\n    } else {\r\n      // let currentOppHand = opponentCardsinhand;\r\n      let card = opponentDeck[0];\r\n      let newHand = opponentCardsinhand;\r\n      newHand.push(card);\r\n      opponentDeck.splice(0, 1);\r\n      setopponentCardsinhand(newHand);\r\n    }\r\n  };\r\n\r\n  //On start of player turn\r\n  const startPlayerTurn = () => {\r\n    setGold(gold + 150);\r\n\r\n    console.log(\"Opp gold is: \", oppGold);\r\n\r\n    let newOppGold = oppGold + 150;\r\n    setOppGold(newOppGold);\r\n    setSilencePlayer(false);\r\n\r\n    if (cardsinhand.length > 4) {\r\n      deck.splice(0, 1);\r\n    } else {\r\n      let currentHand = cardsinhand;\r\n      let card = deck[0];\r\n      deck.splice(0, 1);\r\n      currentHand.push(card);\r\n      setCardsInHand(currentHand);\r\n    }\r\n\r\n    setAttackingCard([]);\r\n    setSelectedCard([]);\r\n  };\r\n\r\n  const goldErrorReset = () => setEnoughGold(false);\r\n\r\n  const checkBattlefieldLength = (arr, card) => {\r\n    if (arr.length === 3) {\r\n      return;\r\n    } else {\r\n      arr.push(card);\r\n      setGold(gold - card.cost);\r\n      setBattlefield(arr);\r\n\r\n      let index = cardsinhand.findIndex((x) => x.id === selectedCard[0].id);\r\n      cardsinhand.splice(index, 1);\r\n    }\r\n  };\r\n\r\n  //När en spelare spelar ett kort\r\n  const onPlayCard = () => {\r\n    if (yourturn == false || selectedCard.length === 0) {\r\n      return;\r\n    }\r\n    if (selectedCard[0].cost > gold) {\r\n      setEnoughGold(true);\r\n      setTimeout(goldErrorReset, 3000);\r\n      return;\r\n    }\r\n\r\n    checkCardType();\r\n\r\n    if (selectedCard[0].type === \"spell\") {\r\n      setGold(gold - selectedCard[0].cost);\r\n      spellBattlefieldArr.push(selectedCard[0]);\r\n      setSpellBattlefield(spellBattlefieldArr);\r\n      let index = cardsinhand.findIndex((x) => x.id === selectedCard[0].id);\r\n      cardsinhand.splice(index, 1);\r\n    } else {\r\n      checkBattlefieldLength(battlefieldArr, selectedCard[0]);\r\n    }\r\n\r\n    setSelectedCard([]);\r\n  };\r\n\r\n  const deleteSpellFromArr = () => {\r\n    setTimeout(() => {\r\n      spellBattlefieldArr.splice(0);\r\n      setSpellBattlefield(spellBattlefield);\r\n    }, 2000);\r\n  };\r\n\r\n  const checkCardType = () => {\r\n    if (selectedCard[0].type === \"spell\") {\r\n      switch (selectedCard[0].name) {\r\n        case \"Quire\":\r\n          DrawOneCard(deck, cardsinhand);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Money Making Idea\":\r\n          setTimeout(() => {\r\n            setGold(gold + 100);\r\n          }, 500);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"TinyMCE\":\r\n          HealEveryCard(battlefield);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"TP1\":\r\n          if (battlefield.length === 0) {\r\n            return;\r\n          }\r\n\r\n          let select = Math.floor(\r\n            Math.random() * Math.floor(battlefield.length)\r\n          );\r\n          let selectedCard = battlefield[select];\r\n\r\n          tp1(selectedCard);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Harmonica\":\r\n          setSilencePlayer(true);\r\n\r\n          harmonica(opponentBattleField);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Tiny MC Daddy\":\r\n          setSilencePlayer(true);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Espresso House\":\r\n          setEnvironment(\"Espresso House\");\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Jon Level Two\":\r\n          jonLevelTwo(battlefield, cardsinhand, deck);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Malware\":\r\n          let newOppHp = opponentHp - 100;\r\n          setOpponentHp(newOppHp);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Coffee\":\r\n          coffee(battlefield, cardsinhand);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      switch (selectedCard[0].name) {\r\n        case \"Onur\":\r\n          if (environment === \"Espresso House\") {\r\n            selectedCard[0].atk = 1300;\r\n            selectedCard[0].def = 2000;\r\n          } else {\r\n            return;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"Gutenberg Mariachi\":\r\n          mariachiOnPlay(opponentBattleField);\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const onCardClick = (e) => {\r\n    if (yourturn == false) {\r\n      return;\r\n    }\r\n    let clicked = e.target.closest(\"div\");\r\n    let card = cardsinhand.filter((x) => x.id === clicked.id);\r\n    setSelectedCard(card);\r\n  };\r\n\r\n  //När en motståndare/bot spelar ett kort\r\n  const playCard = () => {\r\n    for (let i = 0; i < opponentCardsinhand.length; i++) {\r\n      //Card to be played\r\n      let card = opponentCardsinhand[i];\r\n\r\n      if (\r\n        opponentCardsinhand[i].cost < oppGold &&\r\n        opponentCardsinhand[i].typeTwo === \"character\" &&\r\n        opponentBattleField.length < 3\r\n      ) {\r\n        switch (opponentCardsinhand[i].name) {\r\n          case \"Onur\":\r\n            if (environment === \"Espresso House\") {\r\n              opponentCardsinhand[i].atk = 1300;\r\n              opponentCardsinhand[i].def = 2000;\r\n            } else {\r\n              return;\r\n            }\r\n            break;\r\n\r\n          default:\r\n            break;\r\n\r\n          case \"Gutenberg Mariachi\":\r\n            mariachiOnPlay(battlefield);\r\n\r\n            break;\r\n        }\r\n\r\n        let newOppGold = oppGold - card.cost;\r\n        setOppGold(newOppGold);\r\n\r\n        opponentBattleField.push(card);\r\n        setOppoentBattleField(opponentBattleField);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (\r\n        opponentCardsinhand[i].cost < oppGold &&\r\n        opponentCardsinhand[i].type == \"self-spell\"\r\n      ) {\r\n        let newOppGold = oppGold - card.cost;\r\n        setOppGold(newOppGold);\r\n        checkBotSpell(i);\r\n\r\n        spellBattlefieldArr.push(card);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (\r\n        opponentCardsinhand[i].cost < oppGold &&\r\n        opponentBattleField.length > 0 &&\r\n        opponentCardsinhand[i].type == \"synergi-spell\"\r\n      ) {\r\n        let newOppGold = oppGold - card.cost;\r\n        setOppGold(newOppGold);\r\n        checkBotSpell(i);\r\n        spellBattlefieldArr.push(card);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (\r\n        opponentCardsinhand[i].cost < oppGold &&\r\n        battlefield.length > 0 &&\r\n        opponentCardsinhand[i].type == \"damage-spell\"\r\n      ) {\r\n        let newOppGold = oppGold - card.cost;\r\n        setOppGold(newOppGold);\r\n        checkBotSpell(i);\r\n        spellBattlefieldArr.push(card);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else {\r\n        console.log(\"I cant do anything\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkBotSpell = (index) => {\r\n    switch (opponentCardsinhand[index].name) {\r\n      case \"Quire\":\r\n        DrawOneCard(opponentDeck, opponentCardsinhand);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"TinyMCE\":\r\n        HealEveryCard(opponentBattleField);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Money Making Idea\":\r\n        setTimeout(() => {\r\n          setOppGold(oppGold + 100);\r\n        }, 500);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"TP1\":\r\n        let select = Math.floor(\r\n          Math.random() * Math.floor(opponentBattleField.length)\r\n        );\r\n        let selectedCard = opponentBattleField[select];\r\n\r\n        tp1(selectedCard);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Harmonica\":\r\n        harmonica(battlefield);\r\n\r\n        setSilenceBot(true);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Tiny MC Daddy\":\r\n        setSilenceBot(true);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Espresso House\":\r\n        setEnvironment(\"Espresso House\");\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Jon Level Two\":\r\n        jonLevelTwo(opponentBattleField, opponentCardsinhand, opponentDeck);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Malware\":\r\n        let newPlayerHp = hp - 100;\r\n        setHp(newPlayerHp);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Coffee\":\r\n        coffee(opponentBattleField, opponentCardsinhand);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const aiAttack = () => {\r\n    if (opponentBattleField.length === 0 || battlefield.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (silencePlayer === true) {\r\n      console.log(\"You are silenced\");\r\n      return;\r\n    }\r\n\r\n    let cardToAttackWithNumber = Math.floor(\r\n      Math.random() * Math.floor(opponentBattleField.length)\r\n    );\r\n    let cardToAttackWith = opponentBattleField[cardToAttackWithNumber];\r\n    let cardToAttackNumber;\r\n    let cardToAttack;\r\n\r\n    for (let i = 0; i < battlefield.length; i++) {\r\n      if (cardToAttackWith.atk > battlefield[i].def + battlefield[i].hp) {\r\n        cardToAttack = battlefield[i];\r\n      } else if (cardToAttackWith.atk > battlefield[i].def) {\r\n        cardToAttack = battlefield[i];\r\n      } else {\r\n        cardToAttackNumber = Math.floor(\r\n          Math.random() * Math.floor(battlefield.length)\r\n        );\r\n        cardToAttack = battlefield[cardToAttackNumber];\r\n      }\r\n    }\r\n\r\n    let attack = cardToAttackWith.atk;\r\n    let totalHp = cardToAttack.def + cardToAttack.hp;\r\n\r\n    if (attack > totalHp) {\r\n      //If attacked cards attack is less than cardToAttackWith def, reduce def\r\n      if (cardToAttack.atk < cardToAttackWith.def) {\r\n        reduceDefCard(cardToAttack, cardToAttackWith);\r\n        //If attacked cards atk is more than cardToAttackWith def, reduce hp\r\n      } else if (cardToAttack.atk > cardToAttackWith.def) {\r\n        reduceHpCard(cardToAttack, cardToAttackWith);\r\n      }\r\n\r\n      //If card gets destroyed\r\n      if (cardToAttackWith.hp <= 0) {\r\n        let cardAttackedAtk = cardToAttack.atk;\r\n        let totalOppCardHp = cardToAttackWith.def + cardToAttackWith.hp;\r\n        let damage = cardAttackedAtk - totalOppCardHp;\r\n        setOpponentHp(opponentHp - damage);\r\n        opponentBattleField.splice(cardToAttackWithNumber, 1);\r\n      }\r\n\r\n      //Splice/delete our card\r\n      let index = battlefield.findIndex((x) => x.id === cardToAttack.id);\r\n      battlefield.splice(index, 1);\r\n      let damage = attack - totalHp;\r\n      setHp(hp - damage);\r\n    } else if (attack < totalHp) {\r\n      if (attack < cardToAttack.def) {\r\n        let newCardDef = cardToAttack.def - attack;\r\n        cardToAttack.def = newCardDef;\r\n        if (cardToAttackWith.def > cardToAttack.atk) {\r\n          let newCardToAtkWithDef = cardToAttackWith.def - cardToAttack.atk;\r\n          cardToAttackWith.def = newCardToAtkWithDef;\r\n        } else if (cardToAttackWith.def < cardToAttack.atk) {\r\n          let remainingAtk = cardToAttack.atk - cardToAttackWith.def;\r\n          let newCardToAtkWithHp = cardToAttackWith.hp - remainingAtk;\r\n          cardToAttackWith.hp = newCardToAtkWithHp;\r\n          cardToAttackWith.def = 0;\r\n        }\r\n      }\r\n\r\n      if (cardToAttackWith.hp <= 0) {\r\n        let cardAttackedAtk = cardToAttack.atk;\r\n        let totalOppCardHp = cardToAttackWith.def + cardToAttackWith.hp;\r\n        let damage = cardAttackedAtk - totalOppCardHp;\r\n        setOpponentHp(opponentHp - damage);\r\n        opponentBattleField.splice(cardToAttackWithNumber, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  //När man startar gamet\r\n  const startGame = () => {\r\n    let playerArr = [];\r\n    let opponentArr = [];\r\n    playerArr = deck.splice(0, 5);\r\n    opponentArr = opponentDeck.splice(0, 4);\r\n    setCardsInHand(playerArr);\r\n    setopponentCardsinhand(opponentArr);\r\n    setButtonShow(false);\r\n    setStartGameActive(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    makeOpponentDeck(OpponentCardArray);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Canvas\r\n        buttonShow={buttonShow}\r\n        array={CardsArray}\r\n        shuffleArray={shuffleArray}\r\n        opponentDeck={opponentDeck}\r\n        endTurnFunc={EndTurn}\r\n        opponentBattleField={opponentBattleField}\r\n        opponentCardsinhand={opponentCardsinhand}\r\n        cardsinhand={cardsinhand}\r\n        startGame={startGame}\r\n        whichTurn={whichTurn}\r\n        onPlayCard={onPlayCard}\r\n        onCardClick={onCardClick}\r\n        battlefield={battlefield}\r\n        enoughgold={enoughgold}\r\n        gold={gold}\r\n        hp={hp}\r\n        opponentHp={opponentHp}\r\n        newPlayerHp={newPlayerHp}\r\n        newOpponentHp={newOpponentHp}\r\n        startGameActive={startGameActive}\r\n        deck={deck}\r\n        oppDeck={opponentDeck}\r\n        yourturn={yourturn}\r\n        newOpponentBattleField={newOpponentBattleField}\r\n        spellBattlefieldArr={spellBattlefieldArr}\r\n        attackingCard={attackingCard}\r\n        setAttackingCard={setAttackingCard}\r\n        onAttackCardClick={onAttackCardClick}\r\n        setAlreadyAtkedCards={setAlreadyAtkedCards}\r\n        attacked={attacked}\r\n        oppGold={oppGold}\r\n        silenceBot={silenceBot}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FunctionsComponent;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleField.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsarray\\CardArray.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\BattleField.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsarray\\OpponentCardArray.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\Spells.js",["156"],"import OpponentCardsHand from \"../cardsHand/OpponentCardsHand\";\r\n\r\nexport const DrawOneCard = (arr, cardsInHand) => {\r\n  if (cardsInHand > 3) {\r\n    arr.splice(0, 1);\r\n    return;\r\n  } else {\r\n    let card = arr[0];\r\n    arr.splice(0, 1);\r\n    cardsInHand.push(card);\r\n  }\r\n};\r\n\r\nexport const HealEveryCard = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    let newHp = arr[i].hp + 50;\r\n\r\n    if (newHp > 100) {\r\n      let remainHp = newHp - 100;\r\n      let newHp2 = newHp - remainHp;\r\n      arr[i].hp = newHp2;\r\n    } else {\r\n      arr[i].hp = newHp;\r\n    }\r\n\r\n    let newDef = arr[i].def + 100;\r\n    arr[i].def = newDef;\r\n  }\r\n};\r\n\r\nexport const tp1 = (selectedCard) => {\r\n  let newAtk = selectedCard.atk + 100;\r\n  selectedCard.atk = newAtk;\r\n  if (selectedCard.name.includes(\"scrum-master\")) {\r\n    return;\r\n  } else {\r\n    let newName = selectedCard.name + \" scrum-master\";\r\n    selectedCard.name = newName;\r\n  }\r\n};\r\n\r\nexport const harmonica = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].def > 200) {\r\n      let newDef = arr[i].def - 200;\r\n      arr[i].def = newDef;\r\n    } else if (arr[i].def <= 200) {\r\n      let newHp = arr[i].hp - 200;\r\n      arr[i].hp = newHp;\r\n    }\r\n  }\r\n};\r\n\r\nexport const jonLevelTwo = (battlefield, hand, deck) => {\r\n  //First battlefield\r\n  for (let i = 0; i < battlefield.length; i++) {\r\n    if (battlefield[i].name === \"Jon\") {\r\n      let newAtk = battlefield[i].atk + 500;\r\n      battlefield[i].atk = newAtk;\r\n\r\n      let newDef = battlefield[i].def + 300;\r\n      battlefield[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Second hand\r\n  for (let i = 0; i < hand.length; i++) {\r\n    if (hand[i].name === \"Jon\") {\r\n      let newAtk = hand[i].atk + 500;\r\n      hand[i].atk = newAtk;\r\n\r\n      let newDef = hand[i].def + 300;\r\n      hand[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Third deck\r\n  for (let i = 0; i < deck.length; i++) {\r\n    if (deck[i].name === \"Jon\") {\r\n      let newAtk = deck[i].atk + 500;\r\n      deck[i].atk = newAtk;\r\n\r\n      let newDef = deck[i].def + 300;\r\n      deck[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const coffee = (battlefield, hand) => {\r\n  //First battlefield\r\n  for (let i = 0; i < battlefield.length; i++) {\r\n    if (battlefield[i].type === \"Programmer\") {\r\n      let newAtk = battlefield[i].atk + 250;\r\n      battlefield[i].atk = newAtk;\r\n\r\n      let newDef = battlefield[i].def + 150;\r\n      battlefield[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Second hand\r\n  for (let i = 0; i < hand.length; i++) {\r\n    if (hand[i].type === \"Programmer\") {\r\n      let newAtk = hand[i].atk + 250;\r\n      hand[i].atk = newAtk;\r\n\r\n      let newDef = hand[i].def + 150;\r\n      hand[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const mariachiOnPlay = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].def > 150) {\r\n      let newDef = arr[i].def - 150;\r\n      arr[i].def = newDef;\r\n    } else if (arr[i].def <= 150) {\r\n      let newHp = arr[i].hp - 150;\r\n      arr[i].hp = newHp;\r\n    }\r\n  }\r\n};\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\opponent\\OpponentTurn.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvas\\Canvas.js",["157","158","159","160","161","162"],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowRender.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleField.js",["163"],"import React, { useState } from \"react\";\r\n/* import SelectReducer from \"./SelectReducer\"; */\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  AtkDefWrapper,\r\n  Atk,\r\n  Def,\r\n  DescriptionText,\r\n  Type,\r\n  HPWrapper,\r\n  HP,\r\n} from \"./CharacterCardBattleFieldElements\";\r\n\r\n\r\nconst CharacterCardBattleField = ({\r\n  name,\r\n  img,\r\n  type,\r\n  atk,\r\n  def,\r\n  descText,\r\n  hp,\r\n  id,\r\n  value,\r\n  onAttackCardClick,\r\n  onDefendingCardClick,\r\n  onClick,\r\n  active,\r\n  item,\r\n  playerClick,\r\n  setChosenAtk,\r\n  onPlayerClick\r\n}) => {\r\n \r\n  return (\r\n    <CardWrapper\r\n      value={value}\r\n      style={active ? { border: \"5px solid blue\" } : { border: \"\" }}\r\n      id={id}\r\n      onClick={(e) => {onClick(); onAttackCardClick(e)} }\r\n    >\r\n\r\n      <CardName>{name}</CardName>\r\n      <CardImg src={img} />\r\n      <Type>[{type}]</Type>\r\n      <AtkDefWrapper>\r\n        <Atk>Atk: {atk}</Atk>\r\n        <Def>Def: {def}</Def>\r\n      </AtkDefWrapper>\r\n      <DescriptionText>{descText}</DescriptionText>\r\n      <HPWrapper>\r\n        <HP>HP: {hp}</HP>\r\n      </HPWrapper>\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default CharacterCardBattleField;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\OppCharBattleField.js",["164"],"import React, { useState } from \"react\";\r\n/* import SelectReducer from \"./SelectReducer\"; */\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  AtkDefWrapper,\r\n  Atk,\r\n  Def,\r\n  DescriptionText,\r\n  Type,\r\n  HPWrapper,\r\n  HP,\r\n} from \"./CharacterCardBattleFieldElements\";\r\n\r\n\r\nconst OppCharBattleField = ({\r\n  name,\r\n  img,\r\n  type,\r\n  atk,\r\n  def,\r\n  descText,\r\n  hp,\r\n  id,\r\n  value,\r\n  onDefendingCardClick,\r\n  active,\r\n  onClick\r\n}) => {\r\n  // onDefendingCardClick || setChosen\r\n  return (\r\n    <CardWrapper\r\n      value={value}\r\n      style={active ? { border: \"5px solid red\" } : { border: \"\" }}\r\n      id={id}\r\n      onClick={(e) => {onClick(); onDefendingCardClick(e)} }\r\n    >\r\n\r\n      <CardName>{name}</CardName>\r\n      <CardImg src={img} />\r\n      <Type>[{type}]</Type>\r\n      <AtkDefWrapper>\r\n        <Atk>Atk: {atk}</Atk>\r\n        <Def>Def: {def}</Def>\r\n      </AtkDefWrapper>\r\n      <DescriptionText>{descText}</DescriptionText>\r\n      <HPWrapper>\r\n        <HP>HP: {hp}</HP>\r\n      </HPWrapper>\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default OppCharBattleField;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleFieldElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\BattleFieldElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandRender.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvas\\CanvasElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\player\\Player.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHand.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleField.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\CardsHand.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\player\\PlayerElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceRender.js",["165"],"import React from 'react'\r\nimport {\r\n    \r\n    NotEnoughError,\r\n    EndTurnButton, \r\n    TurnInicator\r\n} from \"../canvas/CanvasElements\";\r\nimport {RightToolBarContainer, Hpcontainer, GoldStatus, LeftToolBarContainer } from \"../player/PlayerElements\";\r\n/* import { PlayCardButton, GoldStatus, LeftToolBarContainer } from \"./Player/PlayerElements\"; */\r\nimport { OpponentDeckWrapper, PlayerDeckWrapper, VisualDeck, OpponentCardsLeft, PlayerCardsLeft, AttackButton, OpponentHpcontainer, StyledSwords, AttackText, EnemyAvatar } from './CanvasInterfaceElements'\r\n\r\n\r\nconst CanvasInterfaceRender = ({\r\n  endTurnFunc,\r\n  startGame,\r\n  enoughgold,\r\n  buttonShow,\r\n  whichTurn,\r\n  gold,\r\n  onPlayCard,\r\n  hp,\r\n  deck,\r\n  oppDeck,\r\n  attackingFunc,\r\n  opponentHp,\r\n  toggleEnemyTarget,\r\n  enemyTargeted\r\n}) => {\r\n  return (\r\n    <>\r\n      <OpponentDeckWrapper>\r\n        <VisualDeck>\r\n          <OpponentCardsLeft>{oppDeck.length}</OpponentCardsLeft>\r\n        </VisualDeck>\r\n      </OpponentDeckWrapper>\r\n      <PlayerDeckWrapper>\r\n        <VisualDeck>\r\n          <PlayerCardsLeft>{deck.length}</PlayerCardsLeft>\r\n        </VisualDeck>\r\n      </PlayerDeckWrapper>\r\n\r\n      <LeftToolBarContainer>\r\n        <GoldStatus>\r\n          {gold}{\" \"}\r\n          <i\r\n            className=\"fas fa-coins\"\r\n            style={{ fontSize: \"2rem\", marginLeft: \"6px\" }}\r\n          ></i>\r\n        </GoldStatus>\r\n      </LeftToolBarContainer>\r\n\r\n      <EndTurnButton onClick={endTurnFunc}>End Turn</EndTurnButton>\r\n\r\n      <NotEnoughError\r\n        style={enoughgold ? { display: \"block\" } : { display: \"none\" }}\r\n      >\r\n        Not Enough Gold!\r\n      </NotEnoughError>\r\n\r\n      <EnemyAvatar style={!enemyTargeted ? {filter: 'brightness(75%) contrast(150%)' } : {filter: 'brightness(50%) contrast(150%)' } } onClick={toggleEnemyTarget} />\r\n      <OpponentHpcontainer>{opponentHp}</OpponentHpcontainer>\r\n\r\n      <AttackText>Attack!</AttackText>\r\n      <StyledSwords onClick={attackingFunc} />\r\n\r\n      <RightToolBarContainer>\r\n        <Hpcontainer>{hp}</Hpcontainer>\r\n      </RightToolBarContainer>\r\n\r\n      <TurnInicator>{whichTurn}</TurnInicator>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CanvasInterfaceRender\r\n\r\n/* \r\nconst StyledSwords = styled(Swords)`\r\n  position: absolute;\r\n  z-index: 999;\r\n  bottom: 6.2%;\r\n  right: 28%;\r\n  height: 5rem;\r\n  width: 5rem;\r\n  cursor: pointer;\r\n` */","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCard.js",["166"],"import React, { useState } from \"react\";\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  DescriptionText,\r\n  Type,\r\n  CostWrapper,\r\n  Cost,\r\n} from \"./SpellShowCardElements\";\r\n\r\nconst SpellShowCard = ({ name, img, type, descText, cost, value, id }) => {\r\n  //style={highlight ? { border: '3px solid red'} : { border: 'none'} } onClick={onCardClick}\r\n/* \r\n  const [highlight, setHighlight] = useState(false);\r\n\r\n  const onCardClick = () => {\r\n    setHighlight(!highlight);\r\n  }; */\r\n\r\n  return (\r\n    <>\r\n      <CardWrapper\r\n        id={id}\r\n        value={value}\r\n      /*   style={highlight ? { border: \"5px solid yellow\" } : { border: \"\" }} */\r\n  /*       onClick={onCardClick} */\r\n      >\r\n        {/* <button style={highlight ? buttonStyle : {display: \"none\"}}>Play card?</button> */}\r\n        <CardName>{name}</CardName>\r\n        <CardImg src={img} draggable={false} />\r\n        <Type>[{type}]</Type>\r\n        <DescriptionText>{descText}</DescriptionText>\r\n        <CostWrapper>\r\n          <Cost>Cost: {cost}</Cost>\r\n        </CostWrapper>\r\n      </CardWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpellShowCard;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleFieldElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleFieldElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCard.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCard.js",["167"],"import React, { useState } from \"react\";\r\n\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  AtkDefWrapper,\r\n  Atk,\r\n  Def,\r\n  DescriptionText,\r\n  Type,\r\n  CostHpWrapper,\r\n  HP,\r\n  Cost\r\n} from \"./CharacterCardElements\";\r\n\r\n\r\nconst CharacterCard = ({\r\n  name,\r\n  img,\r\n  type,\r\n  atk,\r\n  def,\r\n  descText,\r\n  hp,\r\n  id,\r\n  value,\r\n  cost,\r\n  cardsinhand,\r\n  onClick,\r\n  active\r\n}) => {\r\n  \r\n  return (\r\n    <CardWrapper\r\n      value={value}\r\n      style={active ? { border: \"5px solid blue\" } : { border: \"\" }}\r\n      id={id}\r\n      onClick={onClick}\r\n    >\r\n\r\n      <CardName>{name}</CardName>\r\n      <CardImg src={img} draggable={false} />\r\n      <Type>[{type}]</Type>\r\n      <AtkDefWrapper>\r\n        <Atk>Atk: {atk}</Atk>\r\n        <Def>Def: {def}</Def>\r\n      </AtkDefWrapper>\r\n      <DescriptionText>{descText}</DescriptionText>\r\n      <CostHpWrapper>\r\n        <Cost>Cost: {cost}</Cost>\r\n        <HP>HP: {hp}</HP>\r\n      </CostHpWrapper>\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default CharacterCard;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCardElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardElements.js",[],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":2,"column":8,"nodeType":"174","messageId":"175","endLine":2,"endColumn":19},{"ruleId":"172","severity":1,"message":"176","line":3,"column":8,"nodeType":"174","messageId":"175","endLine":3,"endColumn":27},{"ruleId":"172","severity":1,"message":"177","line":17,"column":3,"nodeType":"174","messageId":"175","endLine":17,"endColumn":20},{"ruleId":"172","severity":1,"message":"178","line":21,"column":10,"nodeType":"174","messageId":"175","endLine":21,"endColumn":17},{"ruleId":"172","severity":1,"message":"179","line":23,"column":5,"nodeType":"174","messageId":"175","endLine":23,"endColumn":22},{"ruleId":"180","severity":1,"message":"181","line":96,"column":18,"nodeType":"182","messageId":"183","endLine":96,"endColumn":20},{"ruleId":"180","severity":1,"message":"181","line":180,"column":18,"nodeType":"182","messageId":"183","endLine":180,"endColumn":20},{"ruleId":"180","severity":1,"message":"181","line":325,"column":18,"nodeType":"182","messageId":"183","endLine":325,"endColumn":20},{"ruleId":"180","severity":1,"message":"181","line":372,"column":37,"nodeType":"182","messageId":"183","endLine":372,"endColumn":39},{"ruleId":"180","severity":1,"message":"181","line":385,"column":37,"nodeType":"182","messageId":"183","endLine":385,"endColumn":39},{"ruleId":"180","severity":1,"message":"181","line":397,"column":37,"nodeType":"182","messageId":"183","endLine":397,"endColumn":39},{"ruleId":"184","severity":1,"message":"185","line":594,"column":6,"nodeType":"186","endLine":594,"endColumn":8,"suggestions":"187"},{"ruleId":"172","severity":1,"message":"188","line":1,"column":8,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"189","line":10,"column":3,"nodeType":"174","messageId":"175","endLine":10,"endColumn":13},{"ruleId":"172","severity":1,"message":"190","line":67,"column":10,"nodeType":"174","messageId":"175","endLine":67,"endColumn":19},{"ruleId":"172","severity":1,"message":"191","line":71,"column":10,"nodeType":"174","messageId":"175","endLine":71,"endColumn":18},{"ruleId":"180","severity":1,"message":"181","line":89,"column":20,"nodeType":"182","messageId":"183","endLine":89,"endColumn":22},{"ruleId":"180","severity":1,"message":"181","line":108,"column":30,"nodeType":"182","messageId":"183","endLine":108,"endColumn":32},{"ruleId":"180","severity":1,"message":"181","line":108,"column":59,"nodeType":"182","messageId":"183","endLine":108,"endColumn":61},{"ruleId":"172","severity":1,"message":"192","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"192","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"193","line":10,"column":98,"nodeType":"174","messageId":"175","endLine":10,"endColumn":110},{"ruleId":"172","severity":1,"message":"192","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"192","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'BattleField' is defined but never used.","Identifier","unusedVar","'OpponentBattleField' is defined but never used.","'startOpponentTurn' is defined but never used.","'forEach' is defined but never used.","'opponentBattleArr' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'makeOpponentDeck'. Either include it or remove the dependency array.","ArrayExpression",["196"],"'OpponentCardsHand' is defined but never used.","'MuteButton' is defined but never used.","'chosenDef' is assigned a value but never used.","'lostgame' is assigned a value but never used.","'useState' is defined but never used.","'AttackButton' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},"Update the dependencies array to be: [makeOpponentDeck]",{"range":"199","text":"200"},[16048,16050],"[makeOpponentDeck]"]