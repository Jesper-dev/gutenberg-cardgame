[{"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\index.js":"1","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\App.js":"2","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\FunctionsComponent.js":"3","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\battlefield\\BattleField.js":"4","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleField.js":"5","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\canvas\\Canvas.js":"6","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsarray\\CardArray.js":"7","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\Spelleffects\\Spells.js":"8","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsarray\\OpponentCardArray.js":"9","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\opponent\\OpponentTurn.js":"10","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\battlefield\\BattleFieldElements.js":"11","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleFieldElements.js":"12","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\canvas\\CanvasElements.js":"13","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowRender.js":"14","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleField.js":"15","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\OppCharBattleField.js":"16","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleField.js":"17","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandRender.js":"18","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsHand\\CardsHand.js":"19","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHand.js":"20","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\player\\Player.js":"21","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\player\\PlayerElements.js":"22","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceRender.js":"23","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCard.js":"24","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleFieldElements.js":"25","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleFieldElements.js":"26","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandElements.js":"27","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\CharacterCard.js":"28","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\SpellCard.js":"29","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceElements.js":"30","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCardElements.js":"31","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\CharacterCardElements.js":"32","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\SpellCardElements.js":"33"},{"size":167,"mtime":1612360349113,"results":"34","hashOfConfig":"35"},{"size":385,"mtime":1612360353947,"results":"36","hashOfConfig":"35"},{"size":22330,"mtime":1612452559478,"results":"37","hashOfConfig":"35"},{"size":2019,"mtime":1612163777468,"results":"38","hashOfConfig":"35"},{"size":2182,"mtime":1612163777468,"results":"39","hashOfConfig":"35"},{"size":9980,"mtime":1612450740050,"results":"40","hashOfConfig":"35"},{"size":13916,"mtime":1612451427173,"results":"41","hashOfConfig":"35"},{"size":4962,"mtime":1612364847941,"results":"42","hashOfConfig":"35"},{"size":14264,"mtime":1612448554740,"results":"43","hashOfConfig":"35"},{"size":593,"mtime":1611741275971,"results":"44","hashOfConfig":"35"},{"size":297,"mtime":1612186479236,"results":"45","hashOfConfig":"35"},{"size":297,"mtime":1612188253780,"results":"46","hashOfConfig":"35"},{"size":4714,"mtime":1612359841888,"results":"47","hashOfConfig":"35"},{"size":1121,"mtime":1611319745929,"results":"48","hashOfConfig":"35"},{"size":1135,"mtime":1611835801435,"results":"49","hashOfConfig":"35"},{"size":1080,"mtime":1611304120905,"results":"50","hashOfConfig":"35"},{"size":984,"mtime":1611235305463,"results":"51","hashOfConfig":"35"},{"size":457,"mtime":1611233891460,"results":"52","hashOfConfig":"35"},{"size":2133,"mtime":1612163777473,"results":"53","hashOfConfig":"35"},{"size":720,"mtime":1611233661685,"results":"54","hashOfConfig":"35"},{"size":425,"mtime":1611233919394,"results":"55","hashOfConfig":"35"},{"size":2000,"mtime":1612358832737,"results":"56","hashOfConfig":"35"},{"size":3655,"mtime":1612452563525,"results":"57","hashOfConfig":"35"},{"size":1134,"mtime":1612360809111,"results":"58","hashOfConfig":"35"},{"size":2601,"mtime":1612163777471,"results":"59","hashOfConfig":"35"},{"size":1816,"mtime":1612361898447,"results":"60","hashOfConfig":"35"},{"size":767,"mtime":1611844033248,"results":"61","hashOfConfig":"35"},{"size":1496,"mtime":1612357048853,"results":"62","hashOfConfig":"35"},{"size":760,"mtime":1612360717748,"results":"63","hashOfConfig":"35"},{"size":3214,"mtime":1612452157623,"results":"64","hashOfConfig":"35"},{"size":1985,"mtime":1612186192397,"results":"65","hashOfConfig":"35"},{"size":3899,"mtime":1612357661981,"results":"66","hashOfConfig":"35"},{"size":2521,"mtime":1612360739312,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"103feb",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\index.js",[],["147","148"],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\App.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\FunctionsComponent.js",["149","150","151","152","153","154","155","156","157","158"],"import React, { useState, useEffect } from \"react\";\r\nimport BattleField from \"./battlefield/BattleField\";\r\nimport OpponentBattleField from \"./battlefield/OpponentBattleField\";\r\nimport Canvas from \"./canvas/Canvas\";\r\nimport { CardsArray } from \"./cardsarray/CardArray\";\r\nimport { OpponentCardArray } from \"./cardsarray/OpponentCardArray\";\r\nimport {\r\n  DrawOneCard,\r\n  DrawThreeCards,\r\n  harmonica,\r\n  HealEveryCard,\r\n  tp1,\r\n  jonLevelTwo,\r\n  mariachiOnPlay,\r\n  coffee,\r\n  error,\r\n  jesperOnPlay,\r\n  goldenInstrument,\r\n} from \"./Spelleffects/Spells\";\r\nimport {\r\n  startOpponentTurn,\r\n  reduceHpCard,\r\n  reduceDefCard,\r\n} from \"./opponent/OpponentTurn\";\r\n\r\nlet opponentBattleArr = [];\r\nlet battlefieldArr = [];\r\nlet spellBattlefieldArr = [];\r\nlet attackedArray = [];\r\nlet attackedArrayBot = [];\r\nlet battlelog = [];\r\nlet oppGold = 300;\r\n\r\nconst FunctionsComponent = () => {\r\n  const [buttonShow, setButtonShow] = useState(true);\r\n\r\n  const [deck, setDeck] = useState([]);\r\n  const [opponentDeck, setOpponentDeck] = useState([]);\r\n  //   const [opponentCards, setOpponentCards] = useState([]);\r\n  const [yourturn, setYourTurn] = useState(true);\r\n  const [chosenAtk, setChosenAtk] = useState();\r\n  const [chosenDefHigh, setChosenDefHigh] = useState();\r\n  const [selCardHand, setSelCardHand] = useState();\r\n\r\n  const [cardsinhand, setCardsInHand] = useState([]);\r\n  const [opponentCardsinhand, setopponentCardsinhand] = useState([]);\r\n\r\n  const [whichTurn, setWhichTurn] = useState(\"Your Turn!\");\r\n  const [battleMove, setBattleMove] = useState({});\r\n\r\n  const [battlefield, setBattlefield] = useState([]);\r\n  const [opponentBattleField, setOppoentBattleField] = useState([]);\r\n  const [spellBattlefield, setSpellBattlefield] = useState([]);\r\n\r\n  const [selectedCard, setSelectedCard] = useState([]);\r\n  const [attackingCard, setAttackingCard] = useState([]);\r\n  const [defendingCard, setDefendingCard] = useState([]);\r\n  const [attacked, setAttacked] = useState([]);\r\n\r\n  const [gold, setGold] = useState(150);\r\n  const [enoughgold, setEnoughGold] = useState(false);\r\n\r\n  const [hp, setHp] = useState(10000);\r\n  const [opponentHp, setOpponentHp] = useState(10000);\r\n\r\n  const [startGameActive, setStartGameActive] = useState(false);\r\n\r\n  const [silencePlayer, setSilencePlayer] = useState(false);\r\n  const [silenceBot, setSilenceBot] = useState(false);\r\n\r\n  const [environment, setEnvironment] = useState(\"\");\r\n\r\n  const [harmonicaPlayer, setHarmonicaPlayer] = useState(false);\r\n  const [harmonicaBot, setHarmonicaBot] = useState(false);\r\n\r\n  const [round, setRound] = useState(0);\r\n\r\n  const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n  };\r\n\r\n  const setAlreadyAtkedCards = () => {\r\n    attackedArray.push(attackingCard[0]);\r\n    setAttacked(attackedArray);\r\n  };\r\n  const newOpponentHp = (newHp) => setOpponentHp(newHp);\r\n  const newPlayerHp = (newHp) => setHp(newHp);\r\n\r\n  const newOpponentBattleField = (arr) => setOppoentBattleField(arr);\r\n\r\n  const makeOpponentDeck = (array) => {\r\n    shuffleArray(array);\r\n    setOpponentDeck(array);\r\n  };\r\n\r\n  useEffect(() => {\r\n    shuffleArray(CardsArray);\r\n    setDeck(CardsArray);\r\n  }, []);\r\n\r\n  const onAttackCardClick = (e) => {\r\n    if (yourturn == false) {\r\n      return;\r\n    }\r\n    let clickedBattleCard = e.target.closest(\"div\");\r\n    let card = battlefield.filter((x) => x.id === clickedBattleCard.id);\r\n\r\n    if (attackingCard.length === 0) {\r\n      setAttackingCard(card);\r\n    } else if (attackingCard[0].id === card[0].id) {\r\n      setAttackingCard([]);\r\n    } else {\r\n      setAttackingCard(card);\r\n    }\r\n  };\r\n\r\n  const EndTurn = () => {\r\n    if (yourturn == false) {\r\n      return;\r\n    }\r\n\r\n    attackedArray = [];\r\n    setAttacked(attackedArray);\r\n\r\n    setSelCardHand();\r\n    setChosenAtk();\r\n    setChosenDefHigh();\r\n    setAttackingCard([]);\r\n    setDefendingCard([]);\r\n    setYourTurn(false);\r\n    setWhichTurn(\"Opponents Turn\");\r\n\r\n    setSilenceBot(false);\r\n    botDrawCard();\r\n\r\n    playCard();\r\n\r\n    setTimeout(() => {\r\n      aiAttack();\r\n    }, 6000);\r\n\r\n    setTimeout(() => {\r\n      setYourTurn(true);\r\n      setWhichTurn(\"Your Turn!\");\r\n\r\n      startPlayerTurn();\r\n    }, 10000);\r\n  };\r\n\r\n  const botDrawCard = () => {\r\n    if (opponentCardsinhand.length > 4) {\r\n      opponentDeck.splice(0, 1);\r\n    } else {\r\n      // let currentOppHand = opponentCardsinhand;\r\n      let card = opponentDeck[0];\r\n      let newHand = opponentCardsinhand;\r\n      newHand.push(card);\r\n      opponentDeck.splice(0, 1);\r\n      setopponentCardsinhand(newHand);\r\n    }\r\n  };\r\n\r\n  //On start of player turn\r\n  const startPlayerTurn = () => {\r\n    setGold(gold + 150);\r\n    setRound(round + 1);\r\n    console.log(round);\r\n\r\n    let newOppGold = oppGold + 150;\r\n    oppGold = newOppGold;\r\n    setSilencePlayer(false);\r\n    attackedArrayBot = [];\r\n\r\n    if (cardsinhand.length > 4) {\r\n      deck.splice(0, 1);\r\n    } else {\r\n      let currentHand = cardsinhand;\r\n      let card = deck[0];\r\n      deck.splice(0, 1);\r\n      currentHand.push(card);\r\n      setCardsInHand(currentHand);\r\n    }\r\n\r\n    setAttackingCard([]);\r\n    setSelectedCard([]);\r\n  };\r\n\r\n  const goldErrorReset = () => setEnoughGold(false);\r\n\r\n  const checkBattlefieldLength = (arr, card) => {\r\n    if (arr.length === 4) {\r\n      return;\r\n    } else {\r\n      battlelog.unshift({ ...selectedCard[0], whoPlayed: \"You\" });\r\n      arr.push(card);\r\n      setGold(gold - card.cost);\r\n      setBattlefield(arr);\r\n\r\n      let index = cardsinhand.findIndex((x) => x.id === selectedCard[0].id);\r\n      cardsinhand.splice(index, 1);\r\n    }\r\n  };\r\n\r\n  //När en spelare spelar ett kort\r\n  const onPlayCard = () => {\r\n    if (yourturn == false || selectedCard.length === 0) {\r\n      return;\r\n    }\r\n    if (selectedCard[0].cost > gold) {\r\n      setEnoughGold(true);\r\n      setTimeout(goldErrorReset, 3000);\r\n      return;\r\n    } else if (selectedCard[0].cost <= gold) {\r\n      checkCardType();\r\n\r\n      if (selectedCard[0].type === \"spell\") {\r\n        setGold(gold - selectedCard[0].cost);\r\n        spellBattlefieldArr.push(selectedCard[0]);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n        let index = cardsinhand.findIndex((x) => x.id === selectedCard[0].id);\r\n        cardsinhand.splice(index, 1);\r\n        battlelog.unshift({ ...selectedCard[0], whoPlayed: \"You\" });\r\n      } else {\r\n        checkBattlefieldLength(battlefieldArr, selectedCard[0]);\r\n      }\r\n\r\n      setSelectedCard([]);\r\n    }\r\n  };\r\n\r\n  const deleteSpellFromArr = () => {\r\n    setTimeout(() => {\r\n      spellBattlefieldArr.splice(0);\r\n      setSpellBattlefield(spellBattlefield);\r\n    }, 2000);\r\n  };\r\n\r\n  //För spelaren\r\n  const checkCardType = () => {\r\n    if (selectedCard[0].type === \"spell\") {\r\n      switch (selectedCard[0].name) {\r\n        case \"Quire\":\r\n          DrawOneCard(deck, cardsinhand);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Money Making Idea\":\r\n          setTimeout(() => {\r\n            setGold(gold + 100);\r\n          }, 500);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"TinyMCE\":\r\n          HealEveryCard(battlefield);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"TP1\":\r\n          if (battlefield.length === 0) {\r\n            return;\r\n          }\r\n\r\n          let select = Math.floor(\r\n            Math.random() * Math.floor(battlefield.length)\r\n          );\r\n          let selectedCard = battlefield[select];\r\n\r\n          tp1(selectedCard);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Harmonica\":\r\n          setSilencePlayer(true);\r\n\r\n          harmonica(opponentBattleField);\r\n          setHarmonicaPlayer(true);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Tiny MC Daddy\":\r\n          setSilencePlayer(true);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Espresso House\":\r\n          setEnvironment(\"Espresso House\");\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Jon Level Two\":\r\n          jonLevelTwo(battlefield, cardsinhand, deck);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Malware\":\r\n          let newOppHp = opponentHp - 100;\r\n          setOpponentHp(newOppHp);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Coffee\":\r\n          coffee(battlefield, cardsinhand);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Error\":\r\n          error(opponentBattleField);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Golden Instrument\":\r\n          goldenInstrument(battlefield);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Quire 2.0\":\r\n          DrawThreeCards(deck, cardsinhand);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      switch (selectedCard[0].name) {\r\n        case \"Onur\":\r\n          if (environment === \"Espresso House\") {\r\n            let newAtk = selectedCard[0].atk + 500;\r\n            let newDef = selectedCard[0].def + 500;\r\n            selectedCard[0].atk = newAtk;\r\n            selectedCard[0].def = newDef;\r\n          } else {\r\n            return;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"Gutenberg Mariachi\":\r\n          mariachiOnPlay(opponentBattleField);\r\n\r\n          break;\r\n\r\n        case \"Anton\":\r\n          if (harmonicaPlayer === true) {\r\n            let newAtk = selectedCard[0].atk + 650;\r\n            selectedCard[0].atk = newAtk;\r\n          } else {\r\n            return;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"Jesper\":\r\n          jesperOnPlay(battlefield, selectedCard[0]);\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const onCardClick = (e) => {\r\n    let clicked = e.target.closest(\"div\");\r\n    let card = cardsinhand.filter((x) => x.id === clicked.id);\r\n\r\n    if (yourturn == false || card[0] === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (selectedCard.length === 0) {\r\n      setSelectedCard(card);\r\n    } else if (selectedCard[0].id === card[0].id) {\r\n      setSelectedCard([]);\r\n    } else {\r\n      setSelectedCard(card);\r\n    }\r\n  };\r\n\r\n  //När en motståndare/bot spelar ett kort\r\n  const playCard = () => {\r\n    for (let i = 0; i < opponentCardsinhand.length; i++) {\r\n      //Card to be played\r\n      let card = opponentCardsinhand[i];\r\n\r\n      if (\r\n        card.cost < oppGold &&\r\n        card.typeTwo === \"character\" &&\r\n        opponentBattleField.length < 4\r\n      ) {\r\n        checkBotChar(i);\r\n\r\n        let newOppGold = oppGold - card.cost;\r\n        oppGold = newOppGold;\r\n\r\n        battlelog.unshift({ ...card, whoPlayed: \"Mr Eyepatch Dude\" });\r\n\r\n        opponentBattleField.push(card);\r\n        setOppoentBattleField(opponentBattleField);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (card.cost < oppGold && card.type === \"self-spell\") {\r\n        let newOppGold = oppGold - card.cost;\r\n        oppGold = newOppGold;\r\n        checkBotSpell(i);\r\n\r\n        spellBattlefieldArr.push(card);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        battlelog.unshift({ ...card, whoPlayed: \"Mr Eyepatch Dude\" });\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (\r\n        card.cost < oppGold &&\r\n        opponentBattleField.length > 0 &&\r\n        card.type === \"synergi-spell\"\r\n      ) {\r\n        let newOppGold = oppGold - card.cost;\r\n        oppGold = newOppGold;\r\n        checkBotSpell(i);\r\n        spellBattlefieldArr.push(card);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        battlelog.unshift({ ...card, whoPlayed: \"Mr Eyepatch Dude\" });\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (\r\n        card.cost < oppGold &&\r\n        battlefield.length > 0 &&\r\n        card.type === \"damage-spell\"\r\n      ) {\r\n        let newOppGold = oppGold - card.cost;\r\n        oppGold = newOppGold;\r\n        checkBotSpell(i);\r\n        battlelog.unshift(card);\r\n\r\n        spellBattlefieldArr.push({ ...card, whoPlayed: \"Mr Eyepatch Dude\" });\r\n\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else {\r\n        console.log(\"I cant do anything\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkBotChar = (i) => {\r\n    switch (opponentCardsinhand[i].name) {\r\n      case \"Onur\":\r\n        if (environment === \"Espresso House\") {\r\n          let newAtk = opponentCardsinhand[i].atk + 500;\r\n          let newDef = opponentCardsinhand[i].def + 500;\r\n          opponentCardsinhand[i].atk = newAtk;\r\n          opponentCardsinhand[i].def = newDef;\r\n        } else {\r\n          return;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n\r\n      case \"Gutenberg Mariachi\":\r\n        mariachiOnPlay(battlefield);\r\n\r\n        break;\r\n\r\n      case \"Anton\":\r\n        if (harmonicaBot === true) {\r\n          let newAtk = opponentCardsinhand[i].atk + 650;\r\n          opponentCardsinhand[i].atk = newAtk;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n      case \"Jesper\":\r\n        jesperOnPlay(opponentBattleField, opponentCardsinhand[i]);\r\n\r\n        break;\r\n    }\r\n  };\r\n\r\n  const checkBotSpell = (index) => {\r\n    switch (opponentCardsinhand[index].name) {\r\n      case \"Quire\":\r\n        DrawOneCard(opponentDeck, opponentCardsinhand);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"TinyMCE\":\r\n        HealEveryCard(opponentBattleField);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Money Making Idea\":\r\n        setTimeout(() => {\r\n          let newOppGold = oppGold + 100;\r\n          oppGold = newOppGold;\r\n        }, 500);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"TP1\":\r\n        let select = Math.floor(\r\n          Math.random() * Math.floor(opponentBattleField.length)\r\n        );\r\n        let selectedCard = opponentBattleField[select];\r\n\r\n        tp1(selectedCard);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Harmonica\":\r\n        harmonica(battlefield);\r\n\r\n        setSilenceBot(true);\r\n        setHarmonicaBot(true);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Tiny MC Daddy\":\r\n        setSilenceBot(true);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Espresso House\":\r\n        setEnvironment(\"Espresso House\");\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Jon Level Two\":\r\n        jonLevelTwo(opponentBattleField, opponentCardsinhand, opponentDeck);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Malware\":\r\n        let newPlayerHp = hp - 100;\r\n        setHp(newPlayerHp);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Coffee\":\r\n        coffee(opponentBattleField, opponentCardsinhand);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Error\":\r\n        error(battlefield);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Golden Instrument\":\r\n        goldenInstrument(opponentBattleField);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Quire 2.0\":\r\n        DrawThreeCards(opponentDeck, opponentCardsinhand);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const aiAttack = () => {\r\n    //Checks states to see which type of attack bot will execute\r\n    if (silencePlayer === true) {\r\n      console.log(\"You are silenced\");\r\n      return;\r\n    } else if (opponentBattleField.length === 0) {\r\n      return;\r\n    } else if (battlefield.length === 0) {\r\n      let playerDmg = 0;\r\n      for (let i = 0; i < opponentBattleField.length; i++) {\r\n        playerDmg += opponentBattleField[i].atk;\r\n      }\r\n\r\n      let BattleMove = {\r\n        attacker: \"Mr Eyepatch dude\",\r\n        deffender: \"Your face\",\r\n      };\r\n\r\n      battlelog.unshift(BattleMove);\r\n\r\n      setHp(hp - playerDmg);\r\n      return;\r\n    }\r\n\r\n    // This section of code will only execute if both sides have cards in batttle array and if the bot isn't silenced\r\n    for (let i = 0; i < opponentBattleField.length; i++) {\r\n      if (battlefield.length === 0) {\r\n        return;\r\n      }\r\n\r\n      let cardToAttackWithNumber = Math.floor(\r\n        Math.random() * Math.floor(opponentBattleField.length)\r\n      );\r\n\r\n      let cardToAttackWith = opponentBattleField[cardToAttackWithNumber];\r\n      let cardToAttackNumber;\r\n      let cardToAttack;\r\n\r\n      if (attackedArrayBot.includes(cardToAttackWith)) {\r\n        cardToAttackWithNumber = Math.floor(\r\n          Math.random() * Math.floor(opponentBattleField.length)\r\n        );\r\n      }\r\n\r\n      attackedArrayBot.push(cardToAttackWith);\r\n\r\n      for (let i = 0; i < battlefield.length; i++) {\r\n        if (cardToAttackWith.atk > battlefield[i].def + battlefield[i].hp) {\r\n          cardToAttack = battlefield[i];\r\n        } else if (cardToAttackWith.atk > battlefield[i].def) {\r\n          cardToAttack = battlefield[i];\r\n        } else {\r\n          cardToAttackNumber = Math.floor(\r\n            Math.random() * Math.floor(battlefield.length)\r\n          );\r\n          cardToAttack = battlefield[cardToAttackNumber];\r\n        }\r\n      }\r\n\r\n      let attack = cardToAttackWith.atk;\r\n      let totalHp = cardToAttack.def + cardToAttack.hp;\r\n\r\n      if (attack > totalHp) {\r\n        //If attacked cards attack is less than cardToAttackWith def, reduce def\r\n        if (cardToAttack.atk < cardToAttackWith.def) {\r\n          reduceDefCard(cardToAttack, cardToAttackWith);\r\n          //If attacked cards atk is more than cardToAttackWith def, reduce hp\r\n        } else if (cardToAttack.atk > cardToAttackWith.def) {\r\n          reduceHpCard(cardToAttack, cardToAttackWith);\r\n        }\r\n\r\n        //If card gets destroyed\r\n        if (cardToAttackWith.hp <= 0) {\r\n          let cardAttackedAtk = cardToAttack.atk;\r\n          let totalOppCardHp = cardToAttackWith.def + cardToAttackWith.hp;\r\n          let damage = cardAttackedAtk - totalOppCardHp;\r\n          setOpponentHp(opponentHp - damage);\r\n          opponentBattleField.splice(cardToAttackWithNumber, 1);\r\n        }\r\n\r\n        //Splice/delete our card\r\n        let index = battlefield.findIndex((x) => x.id === cardToAttack.id);\r\n        battlefield.splice(index, 1);\r\n        let damage = attack - totalHp;\r\n        setHp(hp - damage);\r\n      } else if (attack < totalHp) {\r\n        if (attack < cardToAttack.def) {\r\n          let newCardDef = cardToAttack.def - attack;\r\n          cardToAttack.def = newCardDef;\r\n          if (cardToAttackWith.def > cardToAttack.atk) {\r\n            let newCardToAtkWithDef = cardToAttackWith.def - cardToAttack.atk;\r\n            cardToAttackWith.def = newCardToAtkWithDef;\r\n          } else if (cardToAttackWith.def < cardToAttack.atk) {\r\n            let remainingAtk = cardToAttack.atk - cardToAttackWith.def;\r\n            let newCardToAtkWithHp = cardToAttackWith.hp - remainingAtk;\r\n            cardToAttackWith.hp = newCardToAtkWithHp;\r\n            cardToAttackWith.def = 0;\r\n          }\r\n        }\r\n\r\n        if (cardToAttackWith.hp <= 0) {\r\n          let cardAttackedAtk = cardToAttack.atk;\r\n          let totalOppCardHp = cardToAttackWith.def + cardToAttackWith.hp;\r\n          let damage = cardAttackedAtk - totalOppCardHp;\r\n          setOpponentHp(opponentHp - damage);\r\n          opponentBattleField.splice(cardToAttackWithNumber, 1);\r\n        }\r\n      }\r\n\r\n      /* setBattleMove({\r\n        attacker: cardToAttackWith.name,\r\n        deffender: cardToAttack.name,\r\n      }); */\r\n\r\n      let BattleMove = {\r\n        attacker: cardToAttackWith.name,\r\n        deffender: cardToAttack.name,\r\n      };\r\n\r\n      battlelog.unshift(BattleMove);\r\n    }\r\n  };\r\n\r\n  //När man startar gamet\r\n  const startGame = () => {\r\n    let playerArr = [];\r\n    let opponentArr = [];\r\n    playerArr = deck.splice(0, 5);\r\n    opponentArr = opponentDeck.splice(0, 4);\r\n    setCardsInHand(playerArr);\r\n    setopponentCardsinhand(opponentArr);\r\n    setButtonShow(false);\r\n    setStartGameActive(true);\r\n    setRound(round + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    makeOpponentDeck(OpponentCardArray);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Canvas\r\n        buttonShow={buttonShow}\r\n        array={CardsArray}\r\n        shuffleArray={shuffleArray}\r\n        opponentDeck={opponentDeck}\r\n        endTurnFunc={EndTurn}\r\n        opponentBattleField={opponentBattleField}\r\n        opponentCardsinhand={opponentCardsinhand}\r\n        cardsinhand={cardsinhand}\r\n        startGame={startGame}\r\n        whichTurn={whichTurn}\r\n        onPlayCard={onPlayCard}\r\n        onCardClick={onCardClick}\r\n        battlefield={battlefield}\r\n        enoughgold={enoughgold}\r\n        gold={gold}\r\n        hp={hp}\r\n        opponentHp={opponentHp}\r\n        newPlayerHp={newPlayerHp}\r\n        newOpponentHp={newOpponentHp}\r\n        startGameActive={startGameActive}\r\n        deck={deck}\r\n        oppDeck={opponentDeck}\r\n        yourturn={yourturn}\r\n        newOpponentBattleField={newOpponentBattleField}\r\n        spellBattlefieldArr={spellBattlefieldArr}\r\n        attackingCard={attackingCard}\r\n        setAttackingCard={setAttackingCard}\r\n        onAttackCardClick={onAttackCardClick}\r\n        setAlreadyAtkedCards={setAlreadyAtkedCards}\r\n        attacked={attacked}\r\n        oppGold={oppGold}\r\n        silenceBot={silenceBot}\r\n        chosenAtk={chosenAtk}\r\n        setChosenAtk={setChosenAtk}\r\n        chosenDefHigh={chosenDefHigh}\r\n        setChosenDefHigh={setChosenDefHigh}\r\n        setSelCardHand={setSelCardHand}\r\n        selCardHand={selCardHand}\r\n        setDefendingCard={setDefendingCard}\r\n        defendingCard={defendingCard}\r\n        round={round}\r\n        battleMove={battleMove}\r\n        setBattleMove={setBattleMove}\r\n        battlelog={battlelog}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FunctionsComponent;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\battlefield\\BattleField.js",["159","160"],"import React, { useState } from \"react\";\r\nimport CharacterCardBattleField from \"../card/CharacterCardBattleField\";\r\nimport SpellCardBattleField from \"../card/SpellCardBattleField\";\r\nimport {\r\n  BattlefieldContainer,\r\n  BattlefieldInnerContainer,\r\n} from \"./BattleFieldElements\";\r\n\r\nconst BattleField = ({ Battlefield, onAttackCardClick, yourturn, chosenAtk, setChosenAtk }) => {\r\n\r\n  const highlightCard = (item) => {\r\n    if (!yourturn) {\r\n      return\r\n    }\r\n    if (item == chosenAtk) {\r\n      setChosenAtk()\r\n    } else {\r\n      setChosenAtk(item)\r\n    }\r\n  }\r\n\r\n  const CheckType = (item) => {\r\n    if (item.type === \"spell\") {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <BattlefieldContainer>\r\n        <BattlefieldInnerContainer>\r\n          {Battlefield.map(function (item, i) {\r\n            return CheckType(item) ? (\r\n              <div key={i}>\r\n                <CharacterCardBattleField\r\n                  id={item.id}\r\n                  value={i}\r\n                  name={item.name}\r\n                  img={item.img}\r\n                  type={item.type}\r\n                  atk={item.atk}\r\n                  def={item.def}\r\n                  descText={item.descText}\r\n                  hp={item.hp}\r\n                  onAttackCardClick={onAttackCardClick}\r\n                  active={item === chosenAtk}\r\n                  onClick={() => highlightCard(item)}\r\n                />\r\n              </div>\r\n            ) : (\r\n                <div key={i}>\r\n                  <SpellCardBattleField\r\n                    id={item.id}\r\n                    key={i}\r\n                    name={item.name}\r\n                    img={item.img}\r\n                    type={item.type}\r\n                    descText={item.descText}\r\n                    cost={item.cost}\r\n                  />\r\n                </div>\r\n              );\r\n          })}\r\n        </BattlefieldInnerContainer>\r\n      </BattlefieldContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BattleField;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleField.js",["161","162"],"import React, { useState } from \"react\";\r\nimport OppCharBattleField from \"../card/OppCharBattleField\";\r\nimport SpellCardBattleField from \"../card/SpellCardBattleField\";\r\nimport {\r\n  BattlefieldContainer,\r\n  BattlefieldInnerContainer,\r\n} from \"./OpponentBattleFieldElements\";\r\n\r\nconst OpponentBattleField = ({ opponentBattlefield, onDefendingCardClick, yourturn, chosenDefHigh, setChosenDefHigh }) => {\r\n\r\n\r\n  const highlightCard = (item) => {\r\n    if (!yourturn) {\r\n      return\r\n    }\r\n    if (item == chosenDefHigh) {\r\n      setChosenDefHigh()\r\n    } else {\r\n      setChosenDefHigh(item)\r\n    }\r\n  }\r\n\r\n  const CheckType = (item) => {\r\n    if (item.type === \"spell\") {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BattlefieldContainer>\r\n        <BattlefieldInnerContainer>\r\n          {opponentBattlefield.map(function (item, i) {\r\n            return CheckType(item) ? (\r\n              <div key={i}>\r\n                <OppCharBattleField\r\n                  /* highlight={highlight} */\r\n                  id={item.id}\r\n                  value={i}\r\n                  name={item.name}\r\n                  img={item.img}\r\n                  type={item.type}\r\n                  atk={item.atk}\r\n                  def={item.def}\r\n                  descText={item.descText}\r\n                  hp={item.hp}\r\n                  active={item === chosenDefHigh}\r\n                  onClick={() => highlightCard(item)}\r\n                  onDefendingCardClick={onDefendingCardClick}\r\n                />\r\n              </div>\r\n            ) : (\r\n                <div key={i}>\r\n                  <SpellCardBattleField\r\n                    id={item.id}\r\n                    key={i}\r\n                    name={item.name}\r\n                    img={item.img}\r\n                    type={item.type}\r\n                    descText={item.descText}\r\n                    cost={item.cost}\r\n                    onDefendingCardClick={onDefendingCardClick}\r\n                  />\r\n                </div>\r\n              );\r\n          })}\r\n        </BattlefieldInnerContainer>\r\n      </BattlefieldContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OpponentBattleField;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\canvas\\Canvas.js",["163","164","165","166","167","168","169","170","171"],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsarray\\CardArray.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\Spelleffects\\Spells.js",["172"],"import OpponentCardsHand from \"../cardsHand/OpponentCardsHand\";\r\n\r\nexport const DrawOneCard = (arr, cardsInHand) => {\r\n  if (cardsInHand > 4) {\r\n    arr.splice(0, 1);\r\n    return;\r\n  } else {\r\n    let card = arr[0];\r\n    arr.splice(0, 1);\r\n    cardsInHand.push(card);\r\n  }\r\n};\r\n\r\nexport const DrawThreeCards = (arr, cardsInHand) => {\r\n  if (cardsInHand > 4) {\r\n    arr.splice(0, 3);\r\n    return;\r\n  } else {\r\n    for(let i = 0; i < 3; i++){\r\n      if(cardsInHand.length > 5){\r\n        return;\r\n      } else {\r\n        let card = arr[0]\r\n        cardsInHand.push(card);\r\n        arr.splice(0, 1)\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const HealEveryCard = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    let newHp = arr[i].hp + 50;\r\n\r\n    if (newHp > 100) {\r\n      let remainHp = newHp - 100;\r\n      let newHp2 = newHp - remainHp;\r\n      arr[i].hp = newHp2;\r\n    } else {\r\n      arr[i].hp = newHp;\r\n    }\r\n\r\n    let newDef = arr[i].def + 100;\r\n    arr[i].def = newDef;\r\n  }\r\n};\r\n\r\nexport const tp1 = (selectedCard) => {\r\n  let newAtk = selectedCard.atk + 200;\r\n  selectedCard.atk = newAtk;\r\n  if (selectedCard.name.includes(\"scrum-master\")) {\r\n    return;\r\n  } else {\r\n    let newName = selectedCard.name + \" scrum-master\";\r\n    selectedCard.name = newName;\r\n  }\r\n};\r\n\r\nexport const harmonica = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].def > 200) {\r\n      let newDef = arr[i].def - 200;\r\n      arr[i].def = newDef;\r\n    } else if (arr[i].def <= 200) {\r\n      let newHp = arr[i].hp - 200;\r\n      arr[i].hp = newHp;\r\n    }\r\n  }\r\n};\r\n\r\nexport const jonLevelTwo = (battlefield, hand, deck) => {\r\n  //First battlefield\r\n  for (let i = 0; i < battlefield.length; i++) {\r\n    if (battlefield[i].name === \"Jon\" || battlefield[i].name === \"Jon scrum-master\" ) {\r\n      let newAtk = battlefield[i].atk + 500;\r\n      battlefield[i].atk = newAtk;\r\n\r\n      let newDef = battlefield[i].def + 300;\r\n      battlefield[i].def = newDef;\r\n\r\n      let newName = battlefield[i].name + \" Level Two\";\r\n      battlefield[i].name = newName;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Second hand\r\n  for (let i = 0; i < hand.length; i++) {\r\n    if (hand[i].name === \"Jon\" || hand[i].name === \"Jon scrum-master\") {\r\n      let newAtk = hand[i].atk + 500;\r\n      hand[i].atk = newAtk;\r\n\r\n      let newDef = hand[i].def + 300;\r\n      hand[i].def = newDef;\r\n\r\n      let newName = hand[i].name + \" Level Two\";\r\n      hand[i].name = newName;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Third deck\r\n  for (let i = 0; i < deck.length; i++) {\r\n    if (deck[i].name === \"Jon\" || deck[i].name === \"Jon scrum-master\") {\r\n      let newAtk = deck[i].atk + 500;\r\n      deck[i].atk = newAtk;\r\n\r\n      let newDef = deck[i].def + 300;\r\n      deck[i].def = newDef;\r\n\r\n      let newName = deck[i].name + \" Level Two\";\r\n      deck[i].name = newName;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const coffee = (battlefield, hand) => {\r\n  //First battlefield\r\n  for (let i = 0; i < battlefield.length; i++) {\r\n    if (battlefield[i].type === \"Programmer\") {\r\n      let newAtk = battlefield[i].atk + 250;\r\n      battlefield[i].atk = newAtk;\r\n\r\n      let newDef = battlefield[i].def + 150;\r\n      battlefield[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Second hand\r\n  for (let i = 0; i < hand.length; i++) {\r\n    if (hand[i].type === \"Programmer\") {\r\n      let newAtk = hand[i].atk + 250;\r\n      hand[i].atk = newAtk;\r\n\r\n      let newDef = hand[i].def + 150;\r\n      hand[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const error = (arr) => {\r\n  let select = Math.floor(Math.random() * Math.floor(arr.length));\r\n\r\n  if (arr[select].def > 600) {\r\n    let newDef = arr[select].def - 600;\r\n    arr[select].def = newDef;\r\n  } else if ((arr[select].def = 600)) {\r\n    let newHp = arr[select].hp - 600;\r\n    arr[select].hp = newHp;\r\n  } else if (arr[select].def < 600) {\r\n    let remainDmg = 600 - arr[select].def;\r\n    let newCardHp = arr[select].hp - remainDmg;\r\n    arr[select].hp = newCardHp;\r\n    arr[select].def = 0;\r\n  }\r\n};\r\n\r\nexport const goldenInstrument = (arr) => {\r\n  for(let i = 0; i < arr.length; i++){\r\n    if(arr[i].name === \"Gutenberg Mariachi\"){\r\n      let newDef = arr[i].def + 650;\r\n      arr[i].def = newDef;\r\n      return;\r\n    }\r\n  }\r\n};\r\n\r\nexport const mariachiOnPlay = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].def > 150) {\r\n      let newDef = arr[i].def - 150;\r\n      arr[i].def = newDef;\r\n    } else if (arr[i].def <= 150) {\r\n      let newHp = arr[i].hp - 150;\r\n      arr[i].hp = newHp;\r\n    }\r\n  }\r\n};\r\n\r\nexport const jesperOnPlay = (arr, card) => {\r\n\r\n  let attack = 0;\r\n  for (let i = 0; i < arr.length; i++){\r\n    if(arr[i].type === \"Programmer\"){\r\n      attack += 100;\r\n    }\r\n  }\r\n  \r\n  let newAtk = attack;\r\n  let newCardAtk = card.atk + newAtk;\r\n  card.atk = newCardAtk\r\n\r\n};\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsarray\\OpponentCardArray.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\opponent\\OpponentTurn.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\battlefield\\BattleFieldElements.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleFieldElements.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\canvas\\CanvasElements.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowRender.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleField.js",["173"],"import React, { useState } from \"react\";\r\n/* import SelectReducer from \"./SelectReducer\"; */\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  AtkDefWrapper,\r\n  Atk,\r\n  Def,\r\n  DescriptionText,\r\n  Type,\r\n  HPWrapper,\r\n  HP,\r\n} from \"./CharacterCardBattleFieldElements\";\r\n\r\n\r\nconst CharacterCardBattleField = ({\r\n  name,\r\n  img,\r\n  type,\r\n  atk,\r\n  def,\r\n  descText,\r\n  hp,\r\n  id,\r\n  value,\r\n  onAttackCardClick,\r\n  onDefendingCardClick,\r\n  onClick,\r\n  active,\r\n  item,\r\n  playerClick,\r\n  setChosenAtk,\r\n  onPlayerClick\r\n}) => {\r\n \r\n  return (\r\n    <CardWrapper\r\n      value={value}\r\n      style={active ? { border: \"5px solid blue\" } : { border: \"\" }}\r\n      id={id}\r\n      onClick={(e) => {onClick(); onAttackCardClick(e)} }\r\n    >\r\n\r\n      <CardName>{name}</CardName>\r\n      <CardImg src={img} />\r\n      <Type>[{type}]</Type>\r\n      <AtkDefWrapper>\r\n        <Atk>Atk: {atk}</Atk>\r\n        <Def>Def: {def}</Def>\r\n      </AtkDefWrapper>\r\n      <DescriptionText>{descText}</DescriptionText>\r\n      <HPWrapper>\r\n        <HP>HP: {hp}</HP>\r\n      </HPWrapper>\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default CharacterCardBattleField;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\OppCharBattleField.js",["174"],"import React, { useState } from \"react\";\r\n/* import SelectReducer from \"./SelectReducer\"; */\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  AtkDefWrapper,\r\n  Atk,\r\n  Def,\r\n  DescriptionText,\r\n  Type,\r\n  HPWrapper,\r\n  HP,\r\n} from \"./CharacterCardBattleFieldElements\";\r\n\r\n\r\nconst OppCharBattleField = ({\r\n  name,\r\n  img,\r\n  type,\r\n  atk,\r\n  def,\r\n  descText,\r\n  hp,\r\n  id,\r\n  value,\r\n  onDefendingCardClick,\r\n  active,\r\n  onClick\r\n}) => {\r\n  // onDefendingCardClick || setChosen\r\n  return (\r\n    <CardWrapper\r\n      value={value}\r\n      style={active ? { border: \"5px solid red\" } : { border: \"\" }}\r\n      id={id}\r\n      onClick={(e) => {onClick(); onDefendingCardClick(e)} }\r\n    >\r\n\r\n      <CardName>{name}</CardName>\r\n      <CardImg src={img} />\r\n      <Type>[{type}]</Type>\r\n      <AtkDefWrapper>\r\n        <Atk>Atk: {atk}</Atk>\r\n        <Def>Def: {def}</Def>\r\n      </AtkDefWrapper>\r\n      <DescriptionText>{descText}</DescriptionText>\r\n      <HPWrapper>\r\n        <HP>HP: {hp}</HP>\r\n      </HPWrapper>\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default OppCharBattleField;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleField.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandRender.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsHand\\CardsHand.js",["175","176"],"import React, { useState } from 'react'\r\nimport CharacterCard from \"../card/CharacterCard\";\r\nimport SpellCard from \"../card/SpellCard\";\r\n\r\nconst CardsHand = ({ cardsinhand, CheckType, onCardClick, selCardHand, setSelCardHand, yourturn }) => {\r\n\r\n    const highlightCard = (item) => {\r\n        if (!yourturn) {\r\n            return\r\n        }\r\n        if (item == selCardHand) {\r\n            setSelCardHand()\r\n        } else {\r\n            setSelCardHand(item)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {cardsinhand.map(function (item, i) {\r\n                return CheckType(item) ? (\r\n                    <div key={i} onClick={onCardClick}>\r\n                        <CharacterCard\r\n                            id={item.id}\r\n                            value={i}\r\n                            name={item.name}\r\n                            img={item.img}\r\n                            type={item.type}\r\n                            atk={item.atk}\r\n                            def={item.def}\r\n                            descText={item.descText}\r\n                            hp={item.hp}\r\n                            cost={item.cost}\r\n                            cardsinhand={cardsinhand}\r\n                            active={item === selCardHand}\r\n                            onClick={() => highlightCard(item)}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                        <div key={i} onClick={onCardClick}>\r\n                            <SpellCard\r\n                                id={item.id}\r\n                                key={i}\r\n                                name={item.name}\r\n                                img={item.img}\r\n                                type={item.type}\r\n                                descText={item.descText}\r\n                                cost={item.cost}\r\n                                active={item === selCardHand}\r\n                                onClick={() => highlightCard(item)}\r\n                            />\r\n                        </div>\r\n                    );\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardsHand","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHand.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\player\\Player.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\player\\PlayerElements.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceRender.js",["177","178","179"],"import React, { useState } from \"react\";\r\nimport {\r\n  NotEnoughError,\r\n  EndTurnButton,\r\n  TurnInicator,\r\n} from \"../canvas/CanvasElements\";\r\nimport {\r\n  RightToolBarContainer,\r\n  Hpcontainer,\r\n  GoldStatus,\r\n  LeftToolBarContainer,\r\n} from \"../player/PlayerElements\";\r\nimport useSound from \"use-sound\";\r\nimport swordSfx from \"../../music/sword.mp3\";\r\nimport enemySfx from \"../../music/arr.wav\";\r\n/* import { PlayCardButton, GoldStatus, LeftToolBarContainer } from \"./Player/PlayerElements\"; */\r\nimport {\r\n  OpponentDeckWrapper,\r\n  PlayerDeckWrapper,\r\n  VisualDeck,\r\n  OpponentCardsLeft,\r\n  PlayerCardsLeft,\r\n  AttackButton,\r\n  OpponentHpcontainer,\r\n  StyledSwords,\r\n  AttackText,\r\n  EnemyAvatar,\r\n  StyledGold,\r\n  BattleMove,\r\n  BattleMoveText,\r\n  StyledScroll,\r\n} from \"./CanvasInterfaceElements\";\r\n\r\nconst CanvasInterfaceRender = ({\r\n  endTurnFunc,\r\n  startGame,\r\n  enoughgold,\r\n  buttonShow,\r\n  whichTurn,\r\n  gold,\r\n  onPlayCard,\r\n  hp,\r\n  deck,\r\n  oppDeck,\r\n  attackingFunc,\r\n  opponentHp,\r\n  toggleEnemyTarget,\r\n  enemyTargeted,\r\n  round,\r\n  battleMove,\r\n  battlelog,\r\n  yourturn,\r\n}) => {\r\n  const [swordSound] = useSound(swordSfx, { volume: 0.18 });\r\n\r\n  const [enemySound] = useSound(enemySfx, { volume: 0.18 });\r\n\r\n  console.log(battleMove);\r\n  console.log(battlelog);\r\n  return (\r\n    <>\r\n      <BattleMove>\r\n        {battlelog.map((item, i) => {\r\n          if (item.typeTwo === \"character\") {\r\n            return (\r\n              <BattleMoveText key={i}>\r\n                {item.whoPlayed} played {item.name}\r\n              </BattleMoveText>\r\n            );\r\n          } else {\r\n            return (\r\n              <BattleMoveText key={i}>\r\n                {item.type === \"spell\" || item.typeTwo === \"spell\"\r\n                  ? `${item.whoPlayed} casted ${item.name}`\r\n                  : `${item.attacker} attacked ${item.deffender}`}\r\n              </BattleMoveText>\r\n            );\r\n          }\r\n        })}\r\n      </BattleMove>\r\n\r\n      <OpponentDeckWrapper>\r\n        <VisualDeck>\r\n          <OpponentCardsLeft>{oppDeck.length}</OpponentCardsLeft>\r\n        </VisualDeck>\r\n      </OpponentDeckWrapper>\r\n      <PlayerDeckWrapper>\r\n        <VisualDeck>\r\n          <PlayerCardsLeft>{deck.length}</PlayerCardsLeft>\r\n        </VisualDeck>\r\n      </PlayerDeckWrapper>\r\n\r\n      <LeftToolBarContainer>\r\n        <GoldStatus>\r\n          {gold} <StyledGold />\r\n        </GoldStatus>\r\n      </LeftToolBarContainer>\r\n\r\n      <EndTurnButton onClick={endTurnFunc}>End Turn</EndTurnButton>\r\n\r\n      <NotEnoughError\r\n        style={enoughgold ? { display: \"block\" } : { display: \"none\" }}\r\n      >\r\n        Not Enough Gold!\r\n      </NotEnoughError>\r\n\r\n      <EnemyAvatar\r\n        onMouseEnter={enemySound}\r\n        style={\r\n          !enemyTargeted\r\n            ? { filter: \"brightness(75%) contrast(150%)\" }\r\n            : { filter: \"brightness(50%) contrast(150%)\" }\r\n        }\r\n        onClick={toggleEnemyTarget}\r\n      />\r\n      <OpponentHpcontainer>{opponentHp}</OpponentHpcontainer>\r\n\r\n      <AttackText>Attack!</AttackText>\r\n      <StyledSwords onMouseEnter={swordSound} onClick={attackingFunc} />\r\n\r\n      <RightToolBarContainer>\r\n        <Hpcontainer>{hp}</Hpcontainer>\r\n      </RightToolBarContainer>\r\n\r\n      <TurnInicator font=\"1.7rem\" left=\"30px\" top=\"45px\">\r\n        {whichTurn}\r\n      </TurnInicator>\r\n      <TurnInicator font=\"3rem\" left=\"30px\" top=\"-35px\">\r\n        Round {round}\r\n      </TurnInicator>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CanvasInterfaceRender;\r\n\r\n/*\r\nconst StyledSwords = styled(Swords)`\r\n  position: absolute;\r\n  z-index: 999;\r\n  bottom: 6.2%;\r\n  right: 28%;\r\n  height: 5rem;\r\n  width: 5rem;\r\n  cursor: pointer;\r\n` */\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCard.js",["180","181","182"],"import React, { useState } from \"react\";\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  DescriptionText,\r\n  Type,\r\n  CostWrapper,\r\n  Cost,\r\n} from \"./SpellShowCardElements\";\r\n\r\nconst SpellShowCard = ({ name, img, type, descText, cost, value, id }) => {\r\n  //style={highlight ? { border: '3px solid red'} : { border: 'none'} } onClick={onCardClick}\r\n/* \r\n  const [highlight, setHighlight] = useState(false);\r\n\r\n  const onCardClick = () => {\r\n    setHighlight(!highlight);\r\n  }; */\r\n\r\n  return (\r\n    <>\r\n      <CardWrapper\r\n        id={id}\r\n        value={value}\r\n      /*   style={highlight ? { border: \"5px solid yellow\" } : { border: \"\" }} */\r\n  /*       onClick={onCardClick} */\r\n      >\r\n        {/* <button style={highlight ? buttonStyle : {display: \"none\"}}>Play card?</button> */}\r\n        <CardName>{name}</CardName>\r\n        <CardImg src={img} draggable={false} />\r\n        <Type>[{type}]</Type>\r\n        <DescriptionText>{descText}</DescriptionText>\r\n      {/*   <CostWrapper>\r\n          <Cost>Cost: {cost}</Cost>\r\n        </CostWrapper> */}\r\n      </CardWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpellShowCard;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleFieldElements.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleFieldElements.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandElements.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\CharacterCard.js",["183"],"import React, { useState } from \"react\";\r\n\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  AtkDefWrapper,\r\n  Atk,\r\n  Def,\r\n  DescriptionText,\r\n  Type,\r\n  CostHpWrapper,\r\n  HP,\r\n  Cost,\r\n  StyledShield,\r\n  StyledSword,\r\n  StyledHearth,\r\n  StyledCoin,\r\n  RightWrapper,\r\n  LeftWrapper,\r\n} from \"./CharacterCardElements\";\r\n\r\nconst CharacterCard = ({\r\n  name,\r\n  img,\r\n  type,\r\n  atk,\r\n  def,\r\n  descText,\r\n  hp,\r\n  id,\r\n  value,\r\n  cost,\r\n  cardsinhand,\r\n  onClick,\r\n  active,\r\n}) => {\r\n  return (\r\n    <>\r\n      <CardWrapper\r\n        value={value}\r\n        /*  style={active ? { border: \"5px solid blue\" } : { border: \"\" }} */\r\n        active={active}\r\n        id={id}\r\n        onClick={onClick}\r\n      >\r\n        <CardName>{name}</CardName>\r\n        <CardImg src={img} draggable={false} />\r\n        <Type>[{type}]</Type>\r\n        <AtkDefWrapper>\r\n          <LeftWrapper>\r\n            <StyledSword />\r\n            <Atk>{atk}</Atk>\r\n          </LeftWrapper>\r\n          <RightWrapper>\r\n            <StyledShield />\r\n            <Def>{def}</Def>\r\n          </RightWrapper>\r\n        </AtkDefWrapper>\r\n        <DescriptionText>{descText}</DescriptionText>\r\n        <CostHpWrapper>\r\n          <LeftWrapper>\r\n          <StyledCoin />\r\n          <Cost>{cost}</Cost>\r\n          </LeftWrapper>\r\n\r\n          <RightWrapper>\r\n          <StyledHearth />\r\n          <HP>{hp}</HP>\r\n          </RightWrapper>\r\n        </CostHpWrapper>\r\n      </CardWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CharacterCard;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\SpellCard.js",["184"],"import React, { useState } from \"react\";\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  DescriptionText,\r\n  Type,\r\n  CostWrapper,\r\n  Cost,\r\n  StyledCoin\r\n} from \"./SpellCardElements\";\r\n\r\nconst SpellCard = ({ name, img, type, descText, cost, value, id, active, onClick }) => {\r\n\r\n  return (\r\n    <>\r\n      <CardWrapper\r\n        id={id}\r\n        value={value}\r\n        active={active}\r\n        onClick={onClick}\r\n      >\r\n        <CardName>{name}</CardName>\r\n        <CardImg src={img} draggable={false} />\r\n        <Type>[{type}]</Type>\r\n        <DescriptionText>{descText}</DescriptionText>\r\n        <CostWrapper>\r\n        <StyledCoin /><Cost> {cost}</Cost>\r\n        </CostWrapper>\r\n      </CardWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpellCard;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceElements.js",["185"],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCardElements.js",[],"C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\CharacterCardElements.js",["186","187"],"import styled, { css, keyframes } from \"styled-components\";\r\nimport CardBackground from \"../../Img/card-background-two.jpg\";\r\nimport GoldTexture from \"../../Img/gold-texture.jpg\";\r\nimport DescBack from \"../../Img/desc-back.jpg\";\r\nimport { after } from \"lodash\";\r\n\r\nimport { ReactComponent as Shield } from \"../../Img/defense.svg\";\r\nimport { ReactComponent as Sword } from \"../../Img/attack.svg\";\r\nimport { ReactComponent as Hearth } from \"../../Img/health.svg\";\r\nimport { ReactComponent as Coin } from \"../../Img/coin.svg\";\r\n\r\nexport const CardWrapper = styled.div`\r\n  height: 270px;\r\n  width: 170px;\r\n\r\n  border-radius: 10px;\r\n  border: 5px solid transparent;\r\n\r\n  border-image: url(${GoldTexture}) 1;\r\n\r\n  margin-left: 15px;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  align-items: center;\r\n\r\n  box-shadow: 12px 10px 28px 3px #000;\r\n  background: Background;\r\n  background-image: url(${CardBackground});\r\n\r\n  background-color: #fff;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  margin-top: 100px;\r\n  position: relative;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    margin-top: 0px;\r\n  }\r\n\r\n  ${({ active }) =>\r\n    active &&\r\n    css`\r\n      border: 5px solid red;\r\n    `}\r\n`;\r\n\r\nexport const CardName = styled.h3`\r\n  z-index: 2;\r\n  margin-top: 2%;\r\n  margin-bottom: 1%;\r\n  color: #000;\r\n  font-family: \"Lobster\", cursive;\r\n`;\r\n\r\nexport const CardImg = styled.img`\r\n  margin-top: 0%;\r\n  height: 90px;\r\n  width: 130px;\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const Type = styled.p`\r\n  margin-top: 3%;\r\n  margin-bottom: 0%;\r\n  color: purple;\r\n`;\r\n\r\nexport const AtkDefWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 20px;\r\n  width: 170px;\r\n  /* margin-top: 1%; */\r\n`;\r\n\r\nexport const LeftWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 20px;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n`;\r\nexport const RightWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 20px;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nexport const Atk = styled.p`\r\n  font-family: 'Old Standard TT', serif;\r\n  font-weight: 800;\r\n  text-shadow: 1px 1px 1px #000;\r\n  color: green;\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport const Def = styled.p`\r\n  font-family: 'Old Standard TT', serif;\r\n  font-weight: 800;\r\n  text-shadow: 1px 1px 1px #000;\r\n  color: #2F9DF3;\r\n  margin-right: 10px;\r\n  font-size: 1.1rem;\r\n`;\r\n\r\nexport const DescriptionText = styled.p`\r\n  font-family: \"EB Garamond\", serif;\r\n  font-weight: 700;\r\n\r\n  margin-top: 2%;\r\n  width: 150px;\r\n  max-height: 130px;\r\n  overflow: hidden;\r\n  padding: 5px;\r\n  margin-bottom: 0;\r\n  border: 1px solid black;\r\n  border-radius: 4px;\r\n  background: #fff;\r\n  background-image: url(${DescBack});\r\n  background-position: center; /* Center the image */\r\n  background-size: cover;\r\n  font-size: 0.7rem;\r\n`;\r\n\r\nexport const CostHpWrapper = styled.span`\r\n  margin-top: 5px;\r\n  width: 170px;\r\n  height: 20px;\r\n\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n`;\r\n\r\nexport const HP = styled.p`\r\n  font-family: 'Old Standard TT', serif;\r\n  font-weight: 700;\r\n  height: 20px;\r\n  margin-right: 10px;\r\n  text-shadow: 1.5px 1.5px 1.5px #000;\r\n  color: #E81717;\r\n`;\r\n\r\nexport const Cost = styled.p`\r\n  font-family: 'Old Standard TT', serif;\r\n  font-weight: 700;\r\n  margin-left: 5px;\r\n  height: 20px;\r\n  text-shadow: 1.5px 1.5px 1.5px #000;\r\n  color: gold;\r\n`;\r\n\r\nexport const StyledShield = styled(Shield)`\r\n  width: 35%;\r\n  height: 100%;\r\n`;\r\nexport const StyledSword = styled(Sword)`\r\n  margin-left: 10px;\r\n  width: 35%;\r\n  height: 100%;\r\n`;\r\nexport const StyledHearth = styled(Hearth)`\r\n  width: 40%;\r\n  height: 100%;\r\n`;\r\nexport const StyledCoin = styled(Coin)`\r\n  margin-left: 10px;\r\n  width: 20%;\r\n  height: 100%;\r\n`;\r\n","C:\\Users\\Jesper\\KYH\\VSCode\\Projects\\gutenberg-cardgame\\src\\components\\card\\SpellCardElements.js",[],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":2,"column":8,"nodeType":"194","messageId":"195","endLine":2,"endColumn":19},{"ruleId":"192","severity":1,"message":"196","line":3,"column":8,"nodeType":"194","messageId":"195","endLine":3,"endColumn":27},{"ruleId":"192","severity":1,"message":"197","line":21,"column":3,"nodeType":"194","messageId":"195","endLine":21,"endColumn":20},{"ruleId":"192","severity":1,"message":"198","line":26,"column":5,"nodeType":"194","messageId":"195","endLine":26,"endColumn":22},{"ruleId":"199","severity":1,"message":"200","line":105,"column":18,"nodeType":"201","messageId":"202","endLine":105,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":121,"column":18,"nodeType":"201","messageId":"202","endLine":121,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":209,"column":18,"nodeType":"201","messageId":"202","endLine":209,"endColumn":20},{"ruleId":"199","severity":1,"message":"200","line":398,"column":18,"nodeType":"201","messageId":"202","endLine":398,"endColumn":20},{"ruleId":"203","severity":1,"message":"204","line":508,"column":7,"nodeType":"205","messageId":"206","endLine":511,"endColumn":15},{"ruleId":"207","severity":1,"message":"208","line":763,"column":6,"nodeType":"209","endLine":763,"endColumn":8,"suggestions":"210"},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"199","severity":1,"message":"200","line":15,"column":14,"nodeType":"201","messageId":"202","endLine":15,"endColumn":16},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"199","severity":1,"message":"200","line":16,"column":14,"nodeType":"201","messageId":"202","endLine":16,"endColumn":16},{"ruleId":"192","severity":1,"message":"212","line":10,"column":3,"nodeType":"194","messageId":"195","endLine":10,"endColumn":13},{"ruleId":"192","severity":1,"message":"213","line":30,"column":10,"nodeType":"194","messageId":"195","endLine":30,"endColumn":20},{"ruleId":"192","severity":1,"message":"214","line":79,"column":10,"nodeType":"194","messageId":"195","endLine":79,"endColumn":19},{"ruleId":"192","severity":1,"message":"215","line":79,"column":21,"nodeType":"194","messageId":"195","endLine":79,"endColumn":33},{"ruleId":"192","severity":1,"message":"216","line":83,"column":10,"nodeType":"194","messageId":"195","endLine":83,"endColumn":18},{"ruleId":"199","severity":1,"message":"200","line":105,"column":20,"nodeType":"201","messageId":"202","endLine":105,"endColumn":22},{"ruleId":"199","severity":1,"message":"200","line":136,"column":30,"nodeType":"201","messageId":"202","endLine":136,"endColumn":32},{"ruleId":"199","severity":1,"message":"200","line":136,"column":59,"nodeType":"201","messageId":"202","endLine":136,"endColumn":61},{"ruleId":"199","severity":1,"message":"200","line":225,"column":18,"nodeType":"201","messageId":"202","endLine":225,"endColumn":20},{"ruleId":"192","severity":1,"message":"217","line":1,"column":8,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"199","severity":1,"message":"200","line":11,"column":18,"nodeType":"201","messageId":"202","endLine":11,"endColumn":20},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"192","severity":1,"message":"218","line":23,"column":3,"nodeType":"194","messageId":"195","endLine":23,"endColumn":15},{"ruleId":"192","severity":1,"message":"219","line":31,"column":3,"nodeType":"194","messageId":"195","endLine":31,"endColumn":15},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"192","severity":1,"message":"220","line":8,"column":3,"nodeType":"194","messageId":"195","endLine":8,"endColumn":14},{"ruleId":"192","severity":1,"message":"221","line":9,"column":3,"nodeType":"194","messageId":"195","endLine":9,"endColumn":7},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"192","severity":1,"message":"211","line":1,"column":17,"nodeType":"194","messageId":"195","endLine":1,"endColumn":25},{"ruleId":"192","severity":1,"message":"222","line":6,"column":28,"nodeType":"194","messageId":"195","endLine":6,"endColumn":34},{"ruleId":"192","severity":1,"message":"223","line":1,"column":23,"nodeType":"194","messageId":"195","endLine":1,"endColumn":32},{"ruleId":"192","severity":1,"message":"224","line":5,"column":10,"nodeType":"194","messageId":"195","endLine":5,"endColumn":15},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"no-unused-vars","'BattleField' is defined but never used.","Identifier","unusedVar","'OpponentBattleField' is defined but never used.","'startOpponentTurn' is defined but never used.","'opponentBattleArr' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'makeOpponentDeck'. Either include it or remove the dependency array.","ArrayExpression",["227"],"'useState' is defined but never used.","'MuteButton' is defined but never used.","'BattleMove' is defined but never used.","'chosenDef' is assigned a value but never used.","'setChosenDef' is assigned a value but never used.","'lostgame' is assigned a value but never used.","'OpponentCardsHand' is defined but never used.","'AttackButton' is defined but never used.","'StyledScroll' is defined but never used.","'CostWrapper' is defined but never used.","'Cost' is defined but never used.","'Scroll' is defined but never used.","'keyframes' is defined but never used.","'after' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},"Update the dependencies array to be: [makeOpponentDeck]",{"range":"230","text":"231"},[20625,20627],"[makeOpponentDeck]"]