[{"D:\\programmering\\src\\gutenberg-cardgame\\src\\index.js":"1","D:\\programmering\\src\\gutenberg-cardgame\\src\\App.js":"2","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\FunctionsComponent.js":"3","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\opponent\\OpponentTurn.js":"4","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleField.js":"5","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\BattleField.js":"6","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvas\\Canvas.js":"7","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsarray\\CardArray.js":"8","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsarray\\OpponentCardArray.js":"9","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\Spells.js":"10","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\BattleFieldElements.js":"11","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleFieldElements.js":"12","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowRender.js":"13","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleField.js":"14","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleField.js":"15","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\OppCharBattleField.js":"16","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandRender.js":"17","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\CardsHand.js":"18","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvas\\CanvasElements.js":"19","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\player\\PlayerElements.js":"20","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\player\\Player.js":"21","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceRender.js":"22","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHand.js":"23","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleFieldElements.js":"24","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCard.js":"25","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCard.js":"26","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCard.js":"27","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleFieldElements.js":"28","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandElements.js":"29","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceElements.js":"30","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardElements.js":"31","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardElements.js":"32","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCardElements.js":"33"},{"size":173,"mtime":1611136770223,"results":"34","hashOfConfig":"35"},{"size":432,"mtime":1611993425518,"results":"36","hashOfConfig":"35"},{"size":19576,"mtime":1612114263650,"results":"37","hashOfConfig":"35"},{"size":593,"mtime":1611990409362,"results":"38","hashOfConfig":"35"},{"size":2182,"mtime":1612109019558,"results":"39","hashOfConfig":"35"},{"size":2019,"mtime":1612108693339,"results":"40","hashOfConfig":"35"},{"size":8820,"mtime":1612114277965,"results":"41","hashOfConfig":"35"},{"size":15078,"mtime":1612084412131,"results":"42","hashOfConfig":"35"},{"size":15984,"mtime":1612084412132,"results":"43","hashOfConfig":"35"},{"size":3202,"mtime":1611990409358,"results":"44","hashOfConfig":"35"},{"size":295,"mtime":1611296968576,"results":"45","hashOfConfig":"35"},{"size":295,"mtime":1611296975020,"results":"46","hashOfConfig":"35"},{"size":1121,"mtime":1611484220665,"results":"47","hashOfConfig":"35"},{"size":984,"mtime":1611292218500,"results":"48","hashOfConfig":"35"},{"size":1135,"mtime":1611314412086,"results":"49","hashOfConfig":"35"},{"size":1080,"mtime":1611314412086,"results":"50","hashOfConfig":"35"},{"size":457,"mtime":1611292218501,"results":"51","hashOfConfig":"35"},{"size":2133,"mtime":1612110094204,"results":"52","hashOfConfig":"35"},{"size":4543,"mtime":1611994524769,"results":"53","hashOfConfig":"35"},{"size":1938,"mtime":1611990409362,"results":"54","hashOfConfig":"35"},{"size":425,"mtime":1611292218502,"results":"55","hashOfConfig":"35"},{"size":2354,"mtime":1611990409360,"results":"56","hashOfConfig":"35"},{"size":720,"mtime":1611292218501,"results":"57","hashOfConfig":"35"},{"size":2601,"mtime":1612109646729,"results":"58","hashOfConfig":"35"},{"size":1126,"mtime":1611484220663,"results":"59","hashOfConfig":"35"},{"size":1093,"mtime":1612162434652,"results":"60","hashOfConfig":"35"},{"size":739,"mtime":1612163596101,"results":"61","hashOfConfig":"35"},{"size":1921,"mtime":1611206720021,"results":"62","hashOfConfig":"35"},{"size":767,"mtime":1611292218501,"results":"63","hashOfConfig":"35"},{"size":2362,"mtime":1611990409359,"results":"64","hashOfConfig":"35"},{"size":2548,"mtime":1612163505948,"results":"65","hashOfConfig":"35"},{"size":2230,"mtime":1612163578737,"results":"66","hashOfConfig":"35"},{"size":1985,"mtime":1611990409357,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"j6nnoh",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"D:\\programmering\\src\\gutenberg-cardgame\\src\\index.js",[],["145","146"],"D:\\programmering\\src\\gutenberg-cardgame\\src\\App.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\FunctionsComponent.js",["147","148","149","150","151","152","153","154","155","156"],"import React, { useState, useEffect } from \"react\";\r\nimport BattleField from \"./battlefield/BattleField\";\r\nimport OpponentBattleField from \"./battlefield/OpponentBattleField\";\r\nimport Canvas from \"./canvas/Canvas\";\r\nimport { CardsArray } from \"./cardsarray/CardArray\";\r\nimport { OpponentCardArray } from \"./cardsarray/OpponentCardArray\";\r\nimport {\r\n  DrawOneCard,\r\n  harmonica,\r\n  HealEveryCard,\r\n  tp1,\r\n  jonLevelTwo,\r\n  mariachiOnPlay,\r\n  coffee,\r\n} from \"./Spelleffects/Spells\";\r\nimport {\r\n  startOpponentTurn,\r\n  reduceHpCard,\r\n  reduceDefCard,\r\n} from \"./opponent/OpponentTurn\";\r\nimport { forEach } from \"lodash\";\r\n\r\nlet opponentBattleArr = [];\r\nlet battlefieldArr = [];\r\nlet spellBattlefieldArr = [];\r\nlet attackedArray = [];\r\n\r\nconst FunctionsComponent = () => {\r\n  const [buttonShow, setButtonShow] = useState(true);\r\n\r\n  const [deck, setDeck] = useState([]);\r\n  const [opponentDeck, setOpponentDeck] = useState([]);\r\n  //   const [opponentCards, setOpponentCards] = useState([]);\r\n  const [yourturn, setYourTurn] = useState(true);\r\n  const [chosenAtk, setChosenAtk] = useState();\r\n  const [chosenDefHigh, setChosenDefHigh] = useState();\r\n  const [selCardHand, setSelCardHand] = useState()\r\n\r\n  const [cardsinhand, setCardsInHand] = useState([]);\r\n  const [opponentCardsinhand, setopponentCardsinhand] = useState([]);\r\n\r\n  const [whichTurn, setWhichTurn] = useState(\"Your Turn!\");\r\n\r\n  const [battlefield, setBattlefield] = useState([]);\r\n  const [opponentBattleField, setOppoentBattleField] = useState([]);\r\n  const [spellBattlefield, setSpellBattlefield] = useState([]);\r\n\r\n  const [selectedCard, setSelectedCard] = useState([]);\r\n  const [attackingCard, setAttackingCard] = useState([]);\r\n  const [defendingCard, setDefendingCard] = useState([]);\r\n  const [attacked, setAttacked] = useState([]);\r\n\r\n  const [gold, setGold] = useState(350);\r\n  const [oppGold, setOppGold] = useState(300);\r\n  const [enoughgold, setEnoughGold] = useState(false);\r\n\r\n  const [hp, setHp] = useState(10000);\r\n  const [opponentHp, setOpponentHp] = useState(10000);\r\n\r\n  const [startGameActive, setStartGameActive] = useState(false);\r\n\r\n  const [silencePlayer, setSilencePlayer] = useState(false);\r\n  const [silenceBot, setSilenceBot] = useState(false);\r\n\r\n  const [environment, setEnvironment] = useState(\"\");\r\n\r\n  const [harmonicaPlayer, setHarmonicaPlayer] = useState(false);\r\n  const [harmonicaBot, setHarmonicaBot] = useState(false);\r\n\r\n  const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n  };\r\n\r\n  const setAlreadyAtkedCards = () => {\r\n    attackedArray.push(attackingCard[0]);\r\n    setAttacked(attackedArray);\r\n  };\r\n  const newOpponentHp = (newHp) => setOpponentHp(newHp);\r\n  const newPlayerHp = (newHp) => setHp(newHp);\r\n\r\n  const newOpponentBattleField = (arr) => setOppoentBattleField(arr);\r\n\r\n  const makeOpponentDeck = (array) => {\r\n    shuffleArray(array);\r\n    setOpponentDeck(array);\r\n  };\r\n\r\n  useEffect(() => {\r\n    shuffleArray(CardsArray);\r\n    setDeck(CardsArray);\r\n  }, []);\r\n\r\n  const onAttackCardClick = (e) => {\r\n    if (yourturn == false) {\r\n      return;\r\n    }\r\n    let clickedBattleCard = e.target.closest(\"div\");\r\n    let card = battlefield.filter((x) => x.id === clickedBattleCard.id);\r\n\r\n    if (attackingCard.length === 0) {\r\n      setAttackingCard(card);\r\n    } else if (attackingCard[0].id === card[0].id) {\r\n      setAttackingCard([])\r\n    }\r\n  };\r\n\r\n  const EndTurn = () => {\r\n    if (yourturn == false) {\r\n      return;\r\n    }\r\n\r\n    console.log(opponentCardsinhand);\r\n    attackedArray = [];\r\n    setAttacked(attackedArray);\r\n\r\n    setSelCardHand()\r\n    setChosenAtk()\r\n    setChosenDefHigh()\r\n    setAttackingCard([])\r\n    setDefendingCard([])\r\n    setYourTurn(false);\r\n    setWhichTurn(\"Opponents Turn\");\r\n\r\n    setSilenceBot(false);\r\n    botDrawCard();\r\n    // oppTurn();\r\n\r\n    playCard();\r\n\r\n    setTimeout(() => {\r\n      aiAttack();\r\n    }, 6000);\r\n\r\n    setTimeout(() => {\r\n      setYourTurn(true);\r\n      setWhichTurn(\"Your Turn!\");\r\n      startPlayerTurn();\r\n    }, 10000);\r\n  };\r\n\r\n  const botDrawCard = () => {\r\n    if (opponentCardsinhand.length > 4) {\r\n      opponentDeck.splice(0, 1);\r\n    } else {\r\n      // let currentOppHand = opponentCardsinhand;\r\n      let card = opponentDeck[0];\r\n      let newHand = opponentCardsinhand;\r\n      newHand.push(card);\r\n      opponentDeck.splice(0, 1);\r\n      setopponentCardsinhand(newHand);\r\n    }\r\n  };\r\n\r\n  //On start of player turn\r\n  const startPlayerTurn = () => {\r\n    setGold(gold + 150);\r\n\r\n    console.log(\"Opp gold is: \", oppGold);\r\n\r\n    let newOppGold = oppGold + 150;\r\n    setOppGold(newOppGold);\r\n    setSilencePlayer(false);\r\n\r\n    if (cardsinhand.length > 4) {\r\n      deck.splice(0, 1);\r\n    } else {\r\n      let currentHand = cardsinhand;\r\n      let card = deck[0];\r\n      deck.splice(0, 1);\r\n      currentHand.push(card);\r\n      setCardsInHand(currentHand);\r\n    }\r\n\r\n    setAttackingCard([]);\r\n    setSelectedCard([]);\r\n  };\r\n\r\n  const goldErrorReset = () => setEnoughGold(false);\r\n\r\n  const checkBattlefieldLength = (arr, card) => {\r\n    if (arr.length === 3) {\r\n      return;\r\n    } else {\r\n      arr.push(card);\r\n      setGold(gold - card.cost);\r\n      setBattlefield(arr);\r\n\r\n      let index = cardsinhand.findIndex((x) => x.id === selectedCard[0].id);\r\n      cardsinhand.splice(index, 1);\r\n    }\r\n  };\r\n\r\n  //När en spelare spelar ett kort\r\n  const onPlayCard = () => {\r\n    if (yourturn == false || selectedCard.length === 0) {\r\n      return;\r\n    }\r\n    if (selectedCard[0].cost > gold) {\r\n      setEnoughGold(true);\r\n      setTimeout(goldErrorReset, 3000);\r\n      return;\r\n    }\r\n\r\n    checkCardType();\r\n\r\n    if (selectedCard[0].type === \"spell\") {\r\n      setGold(gold - selectedCard[0].cost);\r\n      spellBattlefieldArr.push(selectedCard[0]);\r\n      setSpellBattlefield(spellBattlefieldArr);\r\n      let index = cardsinhand.findIndex((x) => x.id === selectedCard[0].id);\r\n      cardsinhand.splice(index, 1);\r\n    } else {\r\n      checkBattlefieldLength(battlefieldArr, selectedCard[0]);\r\n    }\r\n\r\n    setSelectedCard([]);\r\n  };\r\n\r\n  const deleteSpellFromArr = () => {\r\n    setTimeout(() => {\r\n      spellBattlefieldArr.splice(0);\r\n      setSpellBattlefield(spellBattlefield);\r\n    }, 2000);\r\n  };\r\n\r\n  //För spelaren\r\n  const checkCardType = () => {\r\n    if (selectedCard[0].type === \"spell\") {\r\n      switch (selectedCard[0].name) {\r\n        case \"Quire\":\r\n          DrawOneCard(deck, cardsinhand);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Money Making Idea\":\r\n          setTimeout(() => {\r\n            setGold(gold + 100);\r\n          }, 500);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"TinyMCE\":\r\n          HealEveryCard(battlefield);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"TP1\":\r\n          if (battlefield.length === 0) {\r\n            return;\r\n          }\r\n\r\n          let select = Math.floor(\r\n            Math.random() * Math.floor(battlefield.length)\r\n          );\r\n          let selectedCard = battlefield[select];\r\n\r\n          tp1(selectedCard);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Harmonica\":\r\n          setSilencePlayer(true);\r\n\r\n          harmonica(opponentBattleField);\r\n          setHarmonicaPlayer(true);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Tiny MC Daddy\":\r\n          setSilencePlayer(true);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Espresso House\":\r\n          setEnvironment(\"Espresso House\");\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Jon Level Two\":\r\n          jonLevelTwo(battlefield, cardsinhand, deck);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Malware\":\r\n          let newOppHp = opponentHp - 100;\r\n          setOpponentHp(newOppHp);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        case \"Coffee\":\r\n          coffee(battlefield, cardsinhand);\r\n\r\n          deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      switch (selectedCard[0].name) {\r\n        case \"Onur\":\r\n          if (environment === \"Espresso House\") {\r\n            let newAtk = selectedCard[0].atk + 500;\r\n            let newDef = selectedCard[0].def + 500;\r\n            selectedCard[0].atk = newAtk;\r\n            selectedCard[0].def = newDef;\r\n          } else {\r\n            return;\r\n          }\r\n\r\n          break;\r\n\r\n        case \"Gutenberg Mariachi\":\r\n          mariachiOnPlay(opponentBattleField);\r\n\r\n          break;\r\n\r\n        case \"Anton\":\r\n          if (harmonicaPlayer === true) {\r\n            let newAtk = selectedCard[0].atk + 650;\r\n            selectedCard[0].atk = newAtk;\r\n          } else {\r\n            return;\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const onCardClick = (e) => {\r\n    if (yourturn == false) {\r\n      return;\r\n    }\r\n    let clicked = e.target.closest(\"div\");\r\n    let card = cardsinhand.filter((x) => x.id === clicked.id);\r\n\r\n    if (selectedCard.length === 0) {\r\n      setSelectedCard(card);\r\n    } else if (selectedCard[0].id === card[0].id) {\r\n      setSelectedCard([])\r\n    }\r\n  };\r\n\r\n  //När en motståndare/bot spelar ett kort\r\n  const playCard = () => {\r\n    for (let i = 0; i < opponentCardsinhand.length; i++) {\r\n      //Card to be played\r\n      let card = opponentCardsinhand[i];\r\n\r\n      if (\r\n        opponentCardsinhand[i].cost < oppGold &&\r\n        opponentCardsinhand[i].typeTwo === \"character\" &&\r\n        opponentBattleField.length < 3\r\n      ) {\r\n        switch (opponentCardsinhand[i].name) {\r\n          case \"Onur\":\r\n            if (environment === \"Espresso House\") {\r\n              let newAtk = opponentCardsinhand[i].atk + 500;\r\n              let newDef = opponentCardsinhand[i].def + 500;\r\n              opponentCardsinhand[i].atk = newAtk;\r\n              opponentCardsinhand[i].def = newDef;\r\n            } else {\r\n              return;\r\n            }\r\n            break;\r\n\r\n          default:\r\n            break;\r\n\r\n          case \"Gutenberg Mariachi\":\r\n            mariachiOnPlay(battlefield);\r\n\r\n            break;\r\n\r\n          case \"Anton\":\r\n            if (harmonicaBot === true) {\r\n              let newAtk = opponentCardsinhand[i].atk + 650;\r\n              opponentCardsinhand[i].atk = newAtk;\r\n            } else {\r\n              return;\r\n            }\r\n        }\r\n\r\n        let newOppGold = oppGold - card.cost;\r\n        setOppGold(newOppGold);\r\n\r\n        opponentBattleField.push(card);\r\n        setOppoentBattleField(opponentBattleField);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (\r\n        opponentCardsinhand[i].cost < oppGold &&\r\n        opponentCardsinhand[i].type === \"self-spell\"\r\n      ) {\r\n        let newOppGold = oppGold - card.cost;\r\n        setOppGold(newOppGold);\r\n        checkBotSpell(i);\r\n\r\n        spellBattlefieldArr.push(card);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (\r\n        opponentCardsinhand[i].cost < oppGold &&\r\n        opponentBattleField.length > 0 &&\r\n        opponentCardsinhand[i].type === \"synergi-spell\"\r\n      ) {\r\n        let newOppGold = oppGold - card.cost;\r\n        setOppGold(newOppGold);\r\n        checkBotSpell(i);\r\n        spellBattlefieldArr.push(card);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else if (\r\n        opponentCardsinhand[i].cost < oppGold &&\r\n        battlefield.length > 0 &&\r\n        opponentCardsinhand[i].type === \"damage-spell\"\r\n      ) {\r\n        let newOppGold = oppGold - card.cost;\r\n        setOppGold(newOppGold);\r\n        checkBotSpell(i);\r\n\r\n        spellBattlefieldArr.push(card);\r\n        setSpellBattlefield(spellBattlefieldArr);\r\n\r\n        opponentCardsinhand.splice(i, 1);\r\n      } else {\r\n        console.log(\"I cant do anything\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkBotSpell = (index) => {\r\n    switch (opponentCardsinhand[index].name) {\r\n      case \"Quire\":\r\n        DrawOneCard(opponentDeck, opponentCardsinhand);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"TinyMCE\":\r\n        HealEveryCard(opponentBattleField);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Money Making Idea\":\r\n        setTimeout(() => {\r\n          setOppGold(oppGold + 100);\r\n        }, 500);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"TP1\":\r\n        let select = Math.floor(\r\n          Math.random() * Math.floor(opponentBattleField.length)\r\n        );\r\n        let selectedCard = opponentBattleField[select];\r\n\r\n        tp1(selectedCard);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Harmonica\":\r\n        harmonica(battlefield);\r\n\r\n        setSilenceBot(true);\r\n        setHarmonicaBot(true);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Tiny MC Daddy\":\r\n        setSilenceBot(true);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Espresso House\":\r\n        setEnvironment(\"Espresso House\");\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Jon Level Two\":\r\n        jonLevelTwo(opponentBattleField, opponentCardsinhand, opponentDeck);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Malware\":\r\n        let newPlayerHp = hp - 100;\r\n        setHp(newPlayerHp);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      case \"Coffee\":\r\n        coffee(opponentBattleField, opponentCardsinhand);\r\n\r\n        deleteSpellFromArr(spellBattlefieldArr);\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const aiAttack = () => {\r\n\r\n    //Checks states to see which type of attack bot will execute \r\n    if (silencePlayer === true) {\r\n      console.log(\"You are silenced\");\r\n      return;\r\n    } else if (opponentBattleField.length === 0) {\r\n      return;\r\n    } else if (battlefield.length === 0) {\r\n      let playerDmg = 0;\r\n      for (let i = 0; i < opponentBattleField.length; i++) {\r\n        playerDmg += opponentBattleField[i].atk\r\n      }\r\n      setHp(hp - playerDmg)\r\n      return;\r\n    }\r\n\r\n    // This section of code will only execute if both sides have cards in batttle array and if the bot isn't silenced\r\n    let cardToAttackWithNumber = Math.floor(\r\n      Math.random() * Math.floor(opponentBattleField.length)\r\n    );\r\n    let cardToAttackWith = opponentBattleField[cardToAttackWithNumber];\r\n    let cardToAttackNumber;\r\n    let cardToAttack;\r\n\r\n    for (let i = 0; i < battlefield.length; i++) {\r\n      if (cardToAttackWith.atk > battlefield[i].def + battlefield[i].hp) {\r\n        cardToAttack = battlefield[i];\r\n      } else if (cardToAttackWith.atk > battlefield[i].def) {\r\n        cardToAttack = battlefield[i];\r\n      } else {\r\n        cardToAttackNumber = Math.floor(\r\n          Math.random() * Math.floor(battlefield.length)\r\n        );\r\n        cardToAttack = battlefield[cardToAttackNumber];\r\n      }\r\n    }\r\n\r\n    let attack = cardToAttackWith.atk;\r\n    let totalHp = cardToAttack.def + cardToAttack.hp;\r\n\r\n    if (attack > totalHp) {\r\n      //If attacked cards attack is less than cardToAttackWith def, reduce def\r\n      if (cardToAttack.atk < cardToAttackWith.def) {\r\n        reduceDefCard(cardToAttack, cardToAttackWith);\r\n        //If attacked cards atk is more than cardToAttackWith def, reduce hp\r\n      } else if (cardToAttack.atk > cardToAttackWith.def) {\r\n        reduceHpCard(cardToAttack, cardToAttackWith);\r\n      }\r\n\r\n      //If card gets destroyed\r\n      if (cardToAttackWith.hp <= 0) {\r\n        let cardAttackedAtk = cardToAttack.atk;\r\n        let totalOppCardHp = cardToAttackWith.def + cardToAttackWith.hp;\r\n        let damage = cardAttackedAtk - totalOppCardHp;\r\n        setOpponentHp(opponentHp - damage);\r\n        opponentBattleField.splice(cardToAttackWithNumber, 1);\r\n      }\r\n\r\n      //Splice/delete our card\r\n      let index = battlefield.findIndex((x) => x.id === cardToAttack.id);\r\n      battlefield.splice(index, 1);\r\n      let damage = attack - totalHp;\r\n      setHp(hp - damage);\r\n    } else if (attack < totalHp) {\r\n      if (attack < cardToAttack.def) {\r\n        let newCardDef = cardToAttack.def - attack;\r\n        cardToAttack.def = newCardDef;\r\n        if (cardToAttackWith.def > cardToAttack.atk) {\r\n          let newCardToAtkWithDef = cardToAttackWith.def - cardToAttack.atk;\r\n          cardToAttackWith.def = newCardToAtkWithDef;\r\n        } else if (cardToAttackWith.def < cardToAttack.atk) {\r\n          let remainingAtk = cardToAttack.atk - cardToAttackWith.def;\r\n          let newCardToAtkWithHp = cardToAttackWith.hp - remainingAtk;\r\n          cardToAttackWith.hp = newCardToAtkWithHp;\r\n          cardToAttackWith.def = 0;\r\n        }\r\n      }\r\n\r\n      if (cardToAttackWith.hp <= 0) {\r\n        let cardAttackedAtk = cardToAttack.atk;\r\n        let totalOppCardHp = cardToAttackWith.def + cardToAttackWith.hp;\r\n        let damage = cardAttackedAtk - totalOppCardHp;\r\n        setOpponentHp(opponentHp - damage);\r\n        opponentBattleField.splice(cardToAttackWithNumber, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  //När man startar gamet\r\n  const startGame = () => {\r\n    let playerArr = [];\r\n    let opponentArr = [];\r\n    playerArr = deck.splice(0, 5);\r\n    opponentArr = opponentDeck.splice(0, 4);\r\n    setCardsInHand(playerArr);\r\n    setopponentCardsinhand(opponentArr);\r\n    setButtonShow(false);\r\n    setStartGameActive(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    makeOpponentDeck(OpponentCardArray);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Canvas\r\n        buttonShow={buttonShow}\r\n        array={CardsArray}\r\n        shuffleArray={shuffleArray}\r\n        opponentDeck={opponentDeck}\r\n        endTurnFunc={EndTurn}\r\n        opponentBattleField={opponentBattleField}\r\n        opponentCardsinhand={opponentCardsinhand}\r\n        cardsinhand={cardsinhand}\r\n        startGame={startGame}\r\n        whichTurn={whichTurn}\r\n        onPlayCard={onPlayCard}\r\n        onCardClick={onCardClick}\r\n        battlefield={battlefield}\r\n        enoughgold={enoughgold}\r\n        gold={gold}\r\n        hp={hp}\r\n        opponentHp={opponentHp}\r\n        newPlayerHp={newPlayerHp}\r\n        newOpponentHp={newOpponentHp}\r\n        startGameActive={startGameActive}\r\n        deck={deck}\r\n        oppDeck={opponentDeck}\r\n        yourturn={yourturn}\r\n        newOpponentBattleField={newOpponentBattleField}\r\n        spellBattlefieldArr={spellBattlefieldArr}\r\n        attackingCard={attackingCard}\r\n        setAttackingCard={setAttackingCard}\r\n        onAttackCardClick={onAttackCardClick}\r\n        setAlreadyAtkedCards={setAlreadyAtkedCards}\r\n        attacked={attacked}\r\n        oppGold={oppGold}\r\n        silenceBot={silenceBot}\r\n        chosenAtk={chosenAtk}\r\n        setChosenAtk={setChosenAtk}\r\n        chosenDefHigh={chosenDefHigh}\r\n        setChosenDefHigh={setChosenDefHigh}\r\n        setSelCardHand={setSelCardHand}\r\n        selCardHand={selCardHand}\r\n        setDefendingCard={setDefendingCard}\r\n        defendingCard={defendingCard}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FunctionsComponent;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\opponent\\OpponentTurn.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleField.js",["157","158"],"import React, { useState } from \"react\";\r\nimport OppCharBattleField from \"../card/OppCharBattleField\";\r\nimport SpellCardBattleField from \"../card/SpellCardBattleField\";\r\nimport {\r\n  BattlefieldContainer,\r\n  BattlefieldInnerContainer,\r\n} from \"./OpponentBattleFieldElements\";\r\n\r\nconst OpponentBattleField = ({ opponentBattlefield, onDefendingCardClick, yourturn, chosenDefHigh, setChosenDefHigh }) => {\r\n\r\n\r\n  const highlightCard = (item) => {\r\n    if (!yourturn) {\r\n      return\r\n    }\r\n    if (item == chosenDefHigh) {\r\n      setChosenDefHigh()\r\n    } else {\r\n      setChosenDefHigh(item)\r\n    }\r\n  }\r\n\r\n  const CheckType = (item) => {\r\n    if (item.type === \"spell\") {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BattlefieldContainer>\r\n        <BattlefieldInnerContainer>\r\n          {opponentBattlefield.map(function (item, i) {\r\n            return CheckType(item) ? (\r\n              <div key={i}>\r\n                <OppCharBattleField\r\n                  /* highlight={highlight} */\r\n                  id={item.id}\r\n                  value={i}\r\n                  name={item.name}\r\n                  img={item.img}\r\n                  type={item.type}\r\n                  atk={item.atk}\r\n                  def={item.def}\r\n                  descText={item.descText}\r\n                  hp={item.hp}\r\n                  active={item === chosenDefHigh}\r\n                  onClick={() => highlightCard(item)}\r\n                  onDefendingCardClick={onDefendingCardClick}\r\n                />\r\n              </div>\r\n            ) : (\r\n                <div key={i}>\r\n                  <SpellCardBattleField\r\n                    id={item.id}\r\n                    key={i}\r\n                    name={item.name}\r\n                    img={item.img}\r\n                    type={item.type}\r\n                    descText={item.descText}\r\n                    cost={item.cost}\r\n                    onDefendingCardClick={onDefendingCardClick}\r\n                  />\r\n                </div>\r\n              );\r\n          })}\r\n        </BattlefieldInnerContainer>\r\n      </BattlefieldContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OpponentBattleField;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\BattleField.js",["159"],"import React, { useState } from \"react\";\r\nimport CharacterCardBattleField from \"../card/CharacterCardBattleField\";\r\nimport SpellCardBattleField from \"../card/SpellCardBattleField\";\r\nimport {\r\n  BattlefieldContainer,\r\n  BattlefieldInnerContainer,\r\n} from \"./BattleFieldElements\";\r\n\r\nconst BattleField = ({ Battlefield, onAttackCardClick, yourturn, chosenAtk, setChosenAtk }) => {\r\n\r\n  const highlightCard = (item) => {\r\n    if (!yourturn) {\r\n      return\r\n    }\r\n    if (item == chosenAtk) {\r\n      setChosenAtk()\r\n    } else {\r\n      setChosenAtk(item)\r\n    }\r\n  }\r\n\r\n  const CheckType = (item) => {\r\n    if (item.type === \"spell\") {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <BattlefieldContainer>\r\n        <BattlefieldInnerContainer>\r\n          {Battlefield.map(function (item, i) {\r\n            return CheckType(item) ? (\r\n              <div key={i}>\r\n                <CharacterCardBattleField\r\n                  id={item.id}\r\n                  value={i}\r\n                  name={item.name}\r\n                  img={item.img}\r\n                  type={item.type}\r\n                  atk={item.atk}\r\n                  def={item.def}\r\n                  descText={item.descText}\r\n                  hp={item.hp}\r\n                  onAttackCardClick={onAttackCardClick}\r\n                  active={item === chosenAtk}\r\n                  onClick={() => highlightCard(item)}\r\n                />\r\n              </div>\r\n            ) : (\r\n                <div key={i}>\r\n                  <SpellCardBattleField\r\n                    id={item.id}\r\n                    key={i}\r\n                    name={item.name}\r\n                    img={item.img}\r\n                    type={item.type}\r\n                    descText={item.descText}\r\n                    cost={item.cost}\r\n                  />\r\n                </div>\r\n              );\r\n          })}\r\n        </BattlefieldInnerContainer>\r\n      </BattlefieldContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BattleField;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvas\\Canvas.js",["160","161","162","163","164","165","166","167"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CanvasWrapper,\r\n  StartGameButton,\r\n  AlreadyAtked,\r\n  WonGamePage,\r\n  WonGamePageButton,\r\n  WonGamePageHeader,\r\n  PlayButton,\r\n  MuteButton,\r\n} from \"./CanvasElements\";\r\nimport CanvasInterfaceRender from \"../canvasInterface/CanvasInterfaceRender\";\r\nimport { OpponentTurn } from \"../opponent/OpponentTurn\";\r\nimport BattleField from \"../battlefield/BattleField\";\r\nimport OpponentBattleField from \"../battlefield/OpponentBattleField\";\r\nimport OpponentCardsHandRender from \"../cardsHand/OpponentCardsHandRender\";\r\nimport CardsHand from \"../cardsHand/CardsHand\";\r\nimport Player from \"../player/Player\";\r\nimport SpellShowRender from \"../Spelleffects/SpellShowRender\";\r\nimport {\r\n  OpponentCardContainer,\r\n  PlayerFiledContainer,\r\n  PlayerCardsContainer,\r\n  PlayCardButton,\r\n} from \"../player/PlayerElements\";\r\nimport { BattlefieldContainer } from \"../battlefield/BattleFieldElements\";\r\nimport useSound from \"use-sound\";\r\nimport backMusic from \"../../music/background-music.mp3\";\r\n\r\nlet newCardHp = 0;\r\nlet newCardDef = 0;\r\nlet AtkCardNewDef = 0;\r\nlet AtkCardNewHp = 0;\r\n\r\nconst Canvas = ({\r\n  endTurnFunc,\r\n  opponentBattleField,\r\n  opponentCardsinhand,\r\n  startGame,\r\n  cardsinhand,\r\n  buttonShow,\r\n  whichTurn,\r\n  onPlayCard,\r\n  onCardClick,\r\n  battlefield,\r\n  enoughgold,\r\n  hp,\r\n  opponentHp,\r\n  gold,\r\n  oppGold,\r\n  startGameActive,\r\n  deck,\r\n  oppDeck,\r\n  newOpponentHp,\r\n  newPlayerHp,\r\n  newOpponentBattleField,\r\n  spellBattlefieldArr,\r\n  setAttackingCard,\r\n  attackingCard,\r\n  onAttackCardClick,\r\n  setAlreadyAtkedCards,\r\n  attacked,\r\n  silenceBot,\r\n  yourturn,\r\n  chosenAtk,\r\n  setChosenAtk,\r\n  setChosenDefHigh,\r\n  chosenDefHigh,\r\n  selCardHand,\r\n  setSelCardHand,\r\n  defendingCard,\r\n  setDefendingCard\r\n}) => {\r\n  const [chosenDef, setChosenDef] = useState();\r\n  const [thiscardhasatked, setThiscardhasatked] = useState(false);\r\n  const [enemyTargeted, setEnemeyTarget] = useState(false);\r\n\r\n  const [lostgame, setLostGame] = useState(false);\r\n  const [wongame, setWonGame] = useState(false);\r\n\r\n  /*   const soundUrl = '../../music/background-music.mp3' */\r\n\r\n  const [play] = useSound(backMusic);\r\n\r\n  const toggleEnemyTarget = () => setEnemeyTarget(!enemyTargeted);\r\n  const CheckType = (item) => {\r\n    if (item.type === \"spell\") {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const attackingFunc = () => {\r\n    if (silenceBot == true) {\r\n      console.log(\"You are silenced\");\r\n      return;\r\n    }\r\n    if (enemyTargeted === true && opponentBattleField.length === 0) {\r\n      if (attacked.includes(attackingCard[0])) {\r\n        setThiscardhasatked(true);\r\n        setTimeout(() => {\r\n          setThiscardhasatked(false);\r\n        }, 2500);\r\n      } else {\r\n        setAlreadyAtkedCards();\r\n        if (attackingCard.length === 0) {\r\n          return;\r\n        }\r\n        let newOppHp = opponentHp - attackingCard[0].atk;\r\n        newOpponentHp(newOppHp);\r\n      }\r\n    }\r\n    if (attackingCard.length == 0 || defendingCard.length == 0) {\r\n      return;\r\n    } else if (attacked.includes(attackingCard[0])) {\r\n      setThiscardhasatked(true);\r\n      setTimeout(() => {\r\n        setThiscardhasatked(false);\r\n      }, 2500);\r\n      return;\r\n    } else {\r\n      setAlreadyAtkedCards();\r\n      DefreduceDefAndHp();\r\n      AtkReduceDefAndHp();\r\n      setAttackingCard([]);\r\n      setDefendingCard([]);\r\n    }\r\n  };\r\n\r\n  const reduceOppHp = () => {\r\n    let attack = attackingCard[0].atk;\r\n    let total = defendingCard[0].def + defendingCard[0].hp;\r\n    let damage = attack - total;\r\n    newOpponentHp(opponentHp - damage);\r\n  };\r\n\r\n  const reducePlayerHp = () => {\r\n    let attack = defendingCard[0].atk;\r\n    let total = attackingCard[0].def + attackingCard[0].hp;\r\n    let damage = attack - total;\r\n    newPlayerHp(hp - damage);\r\n  };\r\n\r\n  const DefreduceDefAndHp = () => {\r\n    if (attackingCard[0].atk <= defendingCard[0].def) {\r\n      newCardDef = defendingCard[0].def - attackingCard[0].atk;\r\n      defendingCard[0].def = newCardDef;\r\n    } else if (attackingCard[0].atk > defendingCard[0].def) {\r\n      let remainAtk = attackingCard[0].atk - defendingCard[0].def;\r\n      newCardHp = defendingCard[0].hp - remainAtk;\r\n      if (newCardHp <= 0) {\r\n        reduceOppHp();\r\n        destroyCard(opponentBattleField, defendingCard);\r\n      } else {\r\n        defendingCard[0].hp = newCardHp;\r\n        defendingCard[0].def = 0;\r\n      }\r\n    }\r\n  };\r\n\r\n  const AtkReduceDefAndHp = () => {\r\n    if (defendingCard[0].atk <= attackingCard[0].def) {\r\n      AtkCardNewDef = attackingCard[0].def - defendingCard[0].atk;\r\n      attackingCard[0].def = AtkCardNewDef;\r\n      return newCardDef;\r\n    } else if (defendingCard[0].atk > attackingCard[0].def) {\r\n      let remainAtk = defendingCard[0].atk - attackingCard[0].def;\r\n      AtkCardNewHp = attackingCard[0].hp - remainAtk;\r\n      if (AtkCardNewHp <= 0) {\r\n        reducePlayerHp();\r\n        destroyCard(battlefield, attackingCard);\r\n      } else {\r\n        attackingCard[0].hp = AtkCardNewHp;\r\n        attackingCard[0].def = 0;\r\n      }\r\n    }\r\n  };\r\n\r\n  const destroyCard = (arr, card) => {\r\n    let index = arr.findIndex((x) => x.id === card[0].id);\r\n    arr.splice(index, 1);\r\n  };\r\n\r\n  const onDefendingCardClick = (e) => {\r\n    if (yourturn == false) {\r\n      return;\r\n    }\r\n\r\n    let clickedDefendingCard = e.target.closest(\"div\");\r\n    let card = opponentBattleField.filter((x) => x.id === clickedDefendingCard.id);\r\n    if (defendingCard.length === 0) {\r\n      setDefendingCard(card);\r\n    } else if (defendingCard[0].id === card[0].id) {\r\n      setDefendingCard([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (hp <= 0) {\r\n      setLostGame(true);\r\n    } else if (opponentHp <= 0) {\r\n      setWonGame(true);\r\n    }\r\n  }, [hp, opponentHp]);\r\n\r\n  const restartGame = () => {\r\n    window.location.reload();\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <CanvasWrapper>\r\n      <OpponentTurn />\r\n      <PlayButton onClick={play}>Music</PlayButton>\r\n\r\n      <StartGameButton\r\n        style={buttonShow ? { display: \"flex\" } : { display: \"none\" }}\r\n        onClick={startGame}\r\n      >\r\n        START GAME\r\n      </StartGameButton>\r\n\r\n      {wongame ? (\r\n        <WonGamePage>\r\n          <WonGamePageHeader>\r\n            Congratulations! You bested the eyepatch dude! Well done. You're the man, champ.\r\n          </WonGamePageHeader>\r\n          <WonGamePageButton onClick={restartGame}>\r\n            Restart Game\r\n          </WonGamePageButton>\r\n        </WonGamePage>\r\n      ) : (\r\n          \"\"\r\n        )}\r\n      {/* {lostgame ? <LostGamePage></LostGamePage> : ''} */}\r\n\r\n      {thiscardhasatked ? (\r\n        <AlreadyAtked>This Card Has Already Attacked!</AlreadyAtked>\r\n      ) : (\r\n          \"\"\r\n        )}\r\n      {startGameActive ? (\r\n        <CanvasInterfaceRender\r\n          enoughgold={enoughgold}\r\n          buttonShow={buttonShow}\r\n          endTurnFunc={endTurnFunc}\r\n          startGame={startGame}\r\n          whichTurn={whichTurn}\r\n          onPlayCard={onPlayCard}\r\n          gold={gold}\r\n          hp={hp}\r\n          opponentHp={opponentHp}\r\n          deck={deck}\r\n          oppDeck={oppDeck}\r\n          attackingFunc={attackingFunc}\r\n          toggleEnemyTarget={toggleEnemyTarget}\r\n          enemyTargeted={enemyTargeted}\r\n        />\r\n      ) : (\r\n          <></>\r\n        )}\r\n\r\n      <SpellShowRender spellBattlefieldArr={spellBattlefieldArr} />\r\n\r\n      <OpponentCardContainer>\r\n        <OpponentCardsHandRender opponentCardsinhand={opponentCardsinhand} />\r\n      </OpponentCardContainer>\r\n\r\n      <OpponentBattleField\r\n        onDefendingCardClick={onDefendingCardClick}\r\n        opponentBattlefield={opponentBattleField}\r\n        yourturn={yourturn}\r\n        setChosenDefHigh={setChosenDefHigh}\r\n        chosenDefHigh={chosenDefHigh}\r\n      />\r\n\r\n      <BattlefieldContainer>\r\n        <BattleField\r\n          yourturn={yourturn}\r\n          onAttackCardClick={onAttackCardClick}\r\n          Battlefield={battlefield}\r\n          setChosenAtk={setChosenAtk}\r\n          chosenAtk={chosenAtk}\r\n        />\r\n      </BattlefieldContainer>\r\n\r\n      <Player onPlayCard={onPlayCard} hp={hp} />\r\n      <p>{oppGold}</p>\r\n\r\n      <PlayerFiledContainer>\r\n        <PlayerCardsContainer>\r\n          <CardsHand\r\n            cardsinhand={cardsinhand}\r\n            onCardClick={onCardClick}\r\n            CheckType={CheckType}\r\n            setSelCardHand={setSelCardHand}\r\n            selCardHand={selCardHand}\r\n            yourturn={yourturn}\r\n          />\r\n        </PlayerCardsContainer>\r\n        {startGameActive ? (\r\n          <PlayCardButton onClick={onPlayCard}>\r\n            Play Selected Card!\r\n          </PlayCardButton>\r\n        ) : (\r\n            <></>\r\n          )}\r\n      </PlayerFiledContainer>\r\n    </CanvasWrapper>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsarray\\CardArray.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsarray\\OpponentCardArray.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\Spells.js",["168"],"import OpponentCardsHand from \"../cardsHand/OpponentCardsHand\";\r\n\r\nexport const DrawOneCard = (arr, cardsInHand) => {\r\n  if (cardsInHand > 3) {\r\n    arr.splice(0, 1);\r\n    return;\r\n  } else {\r\n    let card = arr[0];\r\n    arr.splice(0, 1);\r\n    cardsInHand.push(card);\r\n  }\r\n};\r\n\r\nexport const HealEveryCard = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    let newHp = arr[i].hp + 50;\r\n\r\n    if (newHp > 100) {\r\n      let remainHp = newHp - 100;\r\n      let newHp2 = newHp - remainHp;\r\n      arr[i].hp = newHp2;\r\n    } else {\r\n      arr[i].hp = newHp;\r\n    }\r\n\r\n    let newDef = arr[i].def + 100;\r\n    arr[i].def = newDef;\r\n  }\r\n};\r\n\r\nexport const tp1 = (selectedCard) => {\r\n  let newAtk = selectedCard.atk + 100;\r\n  selectedCard.atk = newAtk;\r\n  if (selectedCard.name.includes(\"scrum-master\")) {\r\n    return;\r\n  } else {\r\n    let newName = selectedCard.name + \" scrum-master\";\r\n    selectedCard.name = newName;\r\n  }\r\n};\r\n\r\nexport const harmonica = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].def > 200) {\r\n      let newDef = arr[i].def - 200;\r\n      arr[i].def = newDef;\r\n    } else if (arr[i].def <= 200) {\r\n      let newHp = arr[i].hp - 200;\r\n      arr[i].hp = newHp;\r\n    }\r\n  }\r\n};\r\n\r\nexport const jonLevelTwo = (battlefield, hand, deck) => {\r\n  //First battlefield\r\n  for (let i = 0; i < battlefield.length; i++) {\r\n    if (battlefield[i].name === \"Jon\") {\r\n      let newAtk = battlefield[i].atk + 500;\r\n      battlefield[i].atk = newAtk;\r\n\r\n      let newDef = battlefield[i].def + 300;\r\n      battlefield[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Second hand\r\n  for (let i = 0; i < hand.length; i++) {\r\n    if (hand[i].name === \"Jon\") {\r\n      let newAtk = hand[i].atk + 500;\r\n      hand[i].atk = newAtk;\r\n\r\n      let newDef = hand[i].def + 300;\r\n      hand[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Third deck\r\n  for (let i = 0; i < deck.length; i++) {\r\n    if (deck[i].name === \"Jon\") {\r\n      let newAtk = deck[i].atk + 500;\r\n      deck[i].atk = newAtk;\r\n\r\n      let newDef = deck[i].def + 300;\r\n      deck[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const coffee = (battlefield, hand) => {\r\n  //First battlefield\r\n  for (let i = 0; i < battlefield.length; i++) {\r\n    if (battlefield[i].type === \"Programmer\") {\r\n      let newAtk = battlefield[i].atk + 250;\r\n      battlefield[i].atk = newAtk;\r\n\r\n      let newDef = battlefield[i].def + 150;\r\n      battlefield[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n\r\n  //Second hand\r\n  for (let i = 0; i < hand.length; i++) {\r\n    if (hand[i].type === \"Programmer\") {\r\n      let newAtk = hand[i].atk + 250;\r\n      hand[i].atk = newAtk;\r\n\r\n      let newDef = hand[i].def + 150;\r\n      hand[i].def = newDef;\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const mariachiOnPlay = (arr) => {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    if (arr[i].def > 150) {\r\n      let newDef = arr[i].def - 150;\r\n      arr[i].def = newDef;\r\n    } else if (arr[i].def <= 150) {\r\n      let newHp = arr[i].hp - 150;\r\n      arr[i].hp = newHp;\r\n    }\r\n  }\r\n};\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\BattleFieldElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\battlefield\\OpponentBattleFieldElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowRender.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleField.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleField.js",["169"],"import React, { useState } from \"react\";\r\n/* import SelectReducer from \"./SelectReducer\"; */\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  AtkDefWrapper,\r\n  Atk,\r\n  Def,\r\n  DescriptionText,\r\n  Type,\r\n  HPWrapper,\r\n  HP,\r\n} from \"./CharacterCardBattleFieldElements\";\r\n\r\n\r\nconst CharacterCardBattleField = ({\r\n  name,\r\n  img,\r\n  type,\r\n  atk,\r\n  def,\r\n  descText,\r\n  hp,\r\n  id,\r\n  value,\r\n  onAttackCardClick,\r\n  onDefendingCardClick,\r\n  onClick,\r\n  active,\r\n  item,\r\n  playerClick,\r\n  setChosenAtk,\r\n  onPlayerClick\r\n}) => {\r\n \r\n  return (\r\n    <CardWrapper\r\n      value={value}\r\n      style={active ? { border: \"5px solid blue\" } : { border: \"\" }}\r\n      id={id}\r\n      onClick={(e) => {onClick(); onAttackCardClick(e)} }\r\n    >\r\n\r\n      <CardName>{name}</CardName>\r\n      <CardImg src={img} />\r\n      <Type>[{type}]</Type>\r\n      <AtkDefWrapper>\r\n        <Atk>Atk: {atk}</Atk>\r\n        <Def>Def: {def}</Def>\r\n      </AtkDefWrapper>\r\n      <DescriptionText>{descText}</DescriptionText>\r\n      <HPWrapper>\r\n        <HP>HP: {hp}</HP>\r\n      </HPWrapper>\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default CharacterCardBattleField;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\OppCharBattleField.js",["170"],"import React, { useState } from \"react\";\r\n/* import SelectReducer from \"./SelectReducer\"; */\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  AtkDefWrapper,\r\n  Atk,\r\n  Def,\r\n  DescriptionText,\r\n  Type,\r\n  HPWrapper,\r\n  HP,\r\n} from \"./CharacterCardBattleFieldElements\";\r\n\r\n\r\nconst OppCharBattleField = ({\r\n  name,\r\n  img,\r\n  type,\r\n  atk,\r\n  def,\r\n  descText,\r\n  hp,\r\n  id,\r\n  value,\r\n  onDefendingCardClick,\r\n  active,\r\n  onClick\r\n}) => {\r\n  // onDefendingCardClick || setChosen\r\n  return (\r\n    <CardWrapper\r\n      value={value}\r\n      style={active ? { border: \"5px solid red\" } : { border: \"\" }}\r\n      id={id}\r\n      onClick={(e) => {onClick(); onDefendingCardClick(e)} }\r\n    >\r\n\r\n      <CardName>{name}</CardName>\r\n      <CardImg src={img} />\r\n      <Type>[{type}]</Type>\r\n      <AtkDefWrapper>\r\n        <Atk>Atk: {atk}</Atk>\r\n        <Def>Def: {def}</Def>\r\n      </AtkDefWrapper>\r\n      <DescriptionText>{descText}</DescriptionText>\r\n      <HPWrapper>\r\n        <HP>HP: {hp}</HP>\r\n      </HPWrapper>\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default OppCharBattleField;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandRender.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\CardsHand.js",["171","172"],"import React, { useState } from 'react'\r\nimport CharacterCard from \"../card/CharacterCard\";\r\nimport SpellCard from \"../card/SpellCard\";\r\n\r\nconst CardsHand = ({ cardsinhand, CheckType, onCardClick, selCardHand, setSelCardHand, yourturn }) => {\r\n\r\n    const highlightCard = (item) => {\r\n        if (!yourturn) {\r\n            return\r\n        }\r\n        if (item == selCardHand) {\r\n            setSelCardHand()\r\n        } else {\r\n            setSelCardHand(item)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {cardsinhand.map(function (item, i) {\r\n                return CheckType(item) ? (\r\n                    <div key={i} onClick={onCardClick}>\r\n                        <CharacterCard\r\n                            id={item.id}\r\n                            value={i}\r\n                            name={item.name}\r\n                            img={item.img}\r\n                            type={item.type}\r\n                            atk={item.atk}\r\n                            def={item.def}\r\n                            descText={item.descText}\r\n                            hp={item.hp}\r\n                            cost={item.cost}\r\n                            cardsinhand={cardsinhand}\r\n                            active={item === selCardHand}\r\n                            onClick={() => highlightCard(item)}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                        <div key={i} onClick={onCardClick}>\r\n                            <SpellCard\r\n                                id={item.id}\r\n                                key={i}\r\n                                name={item.name}\r\n                                img={item.img}\r\n                                type={item.type}\r\n                                descText={item.descText}\r\n                                cost={item.cost}\r\n                                active={item === selCardHand}\r\n                                onClick={() => highlightCard(item)}\r\n                            />\r\n                        </div>\r\n                    );\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardsHand","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvas\\CanvasElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\player\\PlayerElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\player\\Player.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceRender.js",["173"],"import React from 'react'\r\nimport {\r\n    \r\n    NotEnoughError,\r\n    EndTurnButton, \r\n    TurnInicator\r\n} from \"../canvas/CanvasElements\";\r\nimport {RightToolBarContainer, Hpcontainer, GoldStatus, LeftToolBarContainer } from \"../player/PlayerElements\";\r\n/* import { PlayCardButton, GoldStatus, LeftToolBarContainer } from \"./Player/PlayerElements\"; */\r\nimport { OpponentDeckWrapper, PlayerDeckWrapper, VisualDeck, OpponentCardsLeft, PlayerCardsLeft, AttackButton, OpponentHpcontainer, StyledSwords, AttackText, EnemyAvatar } from './CanvasInterfaceElements'\r\n\r\n\r\nconst CanvasInterfaceRender = ({\r\n  endTurnFunc,\r\n  startGame,\r\n  enoughgold,\r\n  buttonShow,\r\n  whichTurn,\r\n  gold,\r\n  onPlayCard,\r\n  hp,\r\n  deck,\r\n  oppDeck,\r\n  attackingFunc,\r\n  opponentHp,\r\n  toggleEnemyTarget,\r\n  enemyTargeted\r\n}) => {\r\n  return (\r\n    <>\r\n      <OpponentDeckWrapper>\r\n        <VisualDeck>\r\n          <OpponentCardsLeft>{oppDeck.length}</OpponentCardsLeft>\r\n        </VisualDeck>\r\n      </OpponentDeckWrapper>\r\n      <PlayerDeckWrapper>\r\n        <VisualDeck>\r\n          <PlayerCardsLeft>{deck.length}</PlayerCardsLeft>\r\n        </VisualDeck>\r\n      </PlayerDeckWrapper>\r\n\r\n      <LeftToolBarContainer>\r\n        <GoldStatus>\r\n          {gold}{\" \"}\r\n          <i\r\n            className=\"fas fa-coins\"\r\n            style={{ fontSize: \"2rem\", marginLeft: \"6px\" }}\r\n          ></i>\r\n        </GoldStatus>\r\n      </LeftToolBarContainer>\r\n\r\n      <EndTurnButton onClick={endTurnFunc}>End Turn</EndTurnButton>\r\n\r\n      <NotEnoughError\r\n        style={enoughgold ? { display: \"block\" } : { display: \"none\" }}\r\n      >\r\n        Not Enough Gold!\r\n      </NotEnoughError>\r\n\r\n      <EnemyAvatar style={!enemyTargeted ? {filter: 'brightness(75%) contrast(150%)' } : {filter: 'brightness(50%) contrast(150%)' } } onClick={toggleEnemyTarget} />\r\n      <OpponentHpcontainer>{opponentHp}</OpponentHpcontainer>\r\n\r\n      <AttackText>Attack!</AttackText>\r\n      <StyledSwords onClick={attackingFunc} />\r\n\r\n      <RightToolBarContainer>\r\n        <Hpcontainer>{hp}</Hpcontainer>\r\n      </RightToolBarContainer>\r\n\r\n      <TurnInicator>{whichTurn}</TurnInicator>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CanvasInterfaceRender\r\n\r\n/* \r\nconst StyledSwords = styled(Swords)`\r\n  position: absolute;\r\n  z-index: 999;\r\n  bottom: 6.2%;\r\n  right: 28%;\r\n  height: 5rem;\r\n  width: 5rem;\r\n  cursor: pointer;\r\n` */","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHand.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardBattleFieldElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCard.js",["174"],"import React, { useState } from \"react\";\r\nimport {\r\n  CardWrapper,\r\n  CardName,\r\n  CardImg,\r\n  DescriptionText,\r\n  Type,\r\n  CostWrapper,\r\n  Cost,\r\n} from \"./SpellShowCardElements\";\r\n\r\nconst SpellShowCard = ({ name, img, type, descText, cost, value, id }) => {\r\n  //style={highlight ? { border: '3px solid red'} : { border: 'none'} } onClick={onCardClick}\r\n/* \r\n  const [highlight, setHighlight] = useState(false);\r\n\r\n  const onCardClick = () => {\r\n    setHighlight(!highlight);\r\n  }; */\r\n\r\n  return (\r\n    <>\r\n      <CardWrapper\r\n        id={id}\r\n        value={value}\r\n      /*   style={highlight ? { border: \"5px solid yellow\" } : { border: \"\" }} */\r\n  /*       onClick={onCardClick} */\r\n      >\r\n        {/* <button style={highlight ? buttonStyle : {display: \"none\"}}>Play card?</button> */}\r\n        <CardName>{name}</CardName>\r\n        <CardImg src={img} draggable={false} />\r\n        <Type>[{type}]</Type>\r\n        <DescriptionText>{descText}</DescriptionText>\r\n        <CostWrapper>\r\n          <Cost>Cost: {cost}</Cost>\r\n        </CostWrapper>\r\n      </CardWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpellShowCard;\r\n","D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCard.js",["175"],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCard.js",["176"],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardBattleFieldElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\cardsHand\\OpponentCardsHandElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\canvasInterface\\CanvasInterfaceElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\CharacterCardElements.js",["177","178"],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\card\\SpellCardElements.js",[],"D:\\programmering\\src\\gutenberg-cardgame\\src\\components\\Spelleffects\\SpellShowCardElements.js",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":2,"column":8,"nodeType":"185","messageId":"186","endLine":2,"endColumn":19},{"ruleId":"183","severity":1,"message":"187","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":27},{"ruleId":"183","severity":1,"message":"188","line":17,"column":3,"nodeType":"185","messageId":"186","endLine":17,"endColumn":20},{"ruleId":"183","severity":1,"message":"189","line":21,"column":10,"nodeType":"185","messageId":"186","endLine":21,"endColumn":17},{"ruleId":"183","severity":1,"message":"190","line":23,"column":5,"nodeType":"185","messageId":"186","endLine":23,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":97,"column":18,"nodeType":"193","messageId":"194","endLine":97,"endColumn":20},{"ruleId":"191","severity":1,"message":"192","line":111,"column":18,"nodeType":"193","messageId":"194","endLine":111,"endColumn":20},{"ruleId":"191","severity":1,"message":"192","line":198,"column":18,"nodeType":"193","messageId":"194","endLine":198,"endColumn":20},{"ruleId":"191","severity":1,"message":"192","line":357,"column":18,"nodeType":"193","messageId":"194","endLine":357,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":651,"column":6,"nodeType":"197","endLine":651,"endColumn":8,"suggestions":"198"},{"ruleId":"183","severity":1,"message":"199","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"191","severity":1,"message":"192","line":16,"column":14,"nodeType":"193","messageId":"194","endLine":16,"endColumn":16},{"ruleId":"191","severity":1,"message":"192","line":17,"column":14,"nodeType":"193","messageId":"194","endLine":17,"endColumn":16},{"ruleId":"183","severity":1,"message":"200","line":10,"column":3,"nodeType":"185","messageId":"186","endLine":10,"endColumn":13},{"ruleId":"183","severity":1,"message":"201","line":74,"column":10,"nodeType":"185","messageId":"186","endLine":74,"endColumn":19},{"ruleId":"183","severity":1,"message":"202","line":74,"column":21,"nodeType":"185","messageId":"186","endLine":74,"endColumn":33},{"ruleId":"183","severity":1,"message":"203","line":78,"column":10,"nodeType":"185","messageId":"186","endLine":78,"endColumn":18},{"ruleId":"191","severity":1,"message":"192","line":95,"column":20,"nodeType":"193","messageId":"194","endLine":95,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":114,"column":30,"nodeType":"193","messageId":"194","endLine":114,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":114,"column":59,"nodeType":"193","messageId":"194","endLine":114,"endColumn":61},{"ruleId":"191","severity":1,"message":"192","line":186,"column":18,"nodeType":"193","messageId":"194","endLine":186,"endColumn":20},{"ruleId":"183","severity":1,"message":"204","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"199","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"199","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"199","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"191","severity":1,"message":"192","line":11,"column":18,"nodeType":"193","messageId":"194","endLine":11,"endColumn":20},{"ruleId":"183","severity":1,"message":"205","line":10,"column":98,"nodeType":"185","messageId":"186","endLine":10,"endColumn":110},{"ruleId":"183","severity":1,"message":"199","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"199","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"199","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"206","line":1,"column":23,"nodeType":"185","messageId":"186","endLine":1,"endColumn":32},{"ruleId":"183","severity":1,"message":"207","line":5,"column":10,"nodeType":"185","messageId":"186","endLine":5,"endColumn":15},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"no-unused-vars","'BattleField' is defined but never used.","Identifier","unusedVar","'OpponentBattleField' is defined but never used.","'startOpponentTurn' is defined but never used.","'forEach' is defined but never used.","'opponentBattleArr' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'makeOpponentDeck'. Either include it or remove the dependency array.","ArrayExpression",["210"],"'useState' is defined but never used.","'MuteButton' is defined but never used.","'chosenDef' is assigned a value but never used.","'setChosenDef' is assigned a value but never used.","'lostgame' is assigned a value but never used.","'OpponentCardsHand' is defined but never used.","'AttackButton' is defined but never used.","'keyframes' is defined but never used.","'after' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"211","fix":"212"},"Update the dependencies array to be: [makeOpponentDeck]",{"range":"213","text":"214"},[17997,17999],"[makeOpponentDeck]"]